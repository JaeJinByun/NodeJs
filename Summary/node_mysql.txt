*Node MySQL(관계형 데이터베이스) 연동
1.관계형 데이터베이스 연동
=>드라이버 만을 이용한 방식: SQL을 소스 코드에 포함시켜서 사용
이 방식의 샘플 코드는 데이터베이스 제조사에서 제공

=>별도의 프레임워크를 이용하는 방식
 - SQL Mapper Framework: SQL 과 소스코드를 분리해서 작업, 유지보수가 쉽고 난이도가 낮지만 성능은 떨어짐, Java 의 MyBatis 가 대표적이고 국내에서는 SI 업계에서 주로 이용

 - ORM(Object Relative Mapper): 데이터베이스의 행 과 프로그래밍 언어의 객체를 1:1로 매핑시켜서 사용하는 방식, 효율은 좋지만 어렵습니다.(설계 과정을 알아야 합니다.), SQL 없이도 데이터베이스 사용이 가능, 솔루션 업계에서 주로 이용, Java 의 JPA(구현체는 Hibernate), Node 의 Sequelize 가 대표적, 최근에 이 방식을 많이 이용

2.관계형 데이터베이스 연동 시 준비 사항
=>사용할 데이터베이스 서버 URL: localhost, 3306
=>사용할 데이터베이스 이름 이나 SID 또는 Service Name: node
=>계정: user00
=>비번: user00

관계형 데이터베이스 중에는 로그인을 하지 않고 사용하는 데이터베이스도 있습니다.
대표적으로는 Access 나 SQLite 가 로그인을 하지 않고 사용합니다.

직접 아이디 와 비번을 생성해서 접속하지 않고 운영체제 인증으로 대신하는 경우도 있습니다.

3.Driver 만을 이용해서 MySQL 연동 - 최근에는 이 방식을 권장하지 않음
=>장점은 다른 프레임워크를 사용하지 않기 때문에 프레임워크에 종속되지 않습니다.

1)패키지: mysql

2)연결 방법
const mysql = require('mysql');

//접속 정보 생성
var connection = mysql.createConnection({
	host:서버 URL,
	port:포트번호,
	user:계정,
	password:비번,
	database:데이터베이스이름
});

//연결
connection.connect((err)=>{
	//연결에 에러가 발생하면 err 에 에러 객체가 대입되고 에러가 없으면 err은 null
}

3)접속 테스트
=>프로젝트 생성 - Entry Point 는 App.js 로 저는 설정했습니다.

=>필요한 패키지 설치: npm install mysql

=>Entry Point 파일(App.js)을 만들어서 작성한 후 실행
//MySQL 연동을 위한 모듈 추출
const mysql = require('mysql');

//접속 정보 생성
var connection = mysql.createConnection({
    host:'192.168.10.4',
    port:3306,
    user:'user00',
    password:"user00",
    database:'node'
});

//연결
connection.connect(function(err){
    //연결 중 오류가 발생하면 수행
    if(err){
        console.log(err);
        throw err;
    }
});

console.log(connection);
console.log("데이터베이스 접속 성공");

=>아직 웹 설정을 하지 않았으므로 node App.js 로 실행

=>실행한 후 데이터베이스 접속 성공 메시지가 보이지 않으면 에러 메시지를 읽고 코드 수정
데이터베이스가 없는 경우에는 데이터베이스에 접속해서 명령 수행
create database node;

4)SQL 실행
=>SELECT 이외의 구문
connection.query("SQL");
connection.query("?를 이용한 SQL", ?에 해당하는 데이터를 바인딩);

=>SELECT 구문
connection.query("SQL", function(err, results, fields){
	//err 은 에러 발생 여부
	//results 가 select 의 결과
	//results는 객체 배열의 형태이므로 반복문으로 순회하면서 .컬럼이름으로 데이터 접근
});

5)SELECT 구문 이외의 구문 실행
=>App.js 파일의 하단에 코드를 추가하고 실행
//테이블 생성 구문
connection.query('CREATE TABLE family(' + 
'id int auto_increment, name varchar(30),' + 
'primary key(id))engine=InnoDB DEFAULT CHARSET=utf8');

//데이터 삽입
connection.query('insert into family(name) values(?)', 
'을지문덕');
connection.query('insert into family(name) values(?)', 
'척준경');

=>실행 한 후 데이터베이스에 접속해서 테이블이 생성 여부 와 데이터 존재 여부 확인
select * from family;

=>한 번 성공한 후 다시 실행할 때는 테이블 생성 구문은 제외하고 실행하셔야 합니다.
 
6)select 테스트
//select 구문
connection.query('select * from family', function(err, results, fields){
    if(err){
        throw err;
    }

    //읽은 내용 전체를 출력
    //console.log(results);

    for(var idx=0; idx < results.length; idx++){
        var row = results[idx];
        console.log(row.name);
    }
});

4.하나의 테이블 연동
=>전체 데이터 가져오기, 페이지 단위로 가져오기, 상세보기, 데이터 삽입, 삭제 구현, 마지막으로 데이터가 수정된 시간을 기록해 두었다가 출력하기
=>클라이언트의 요청은 AJAX 로 처리

1)샘플 데이터를 생성

-- 데이터베이스 확인
show databases;

-- 데이터베이스 생성
create database node;

-- 데이터베이스 사용 설정
use node;

-- 테이블이 존재하는 경우만 수행
DROP TABLE goods; 

CREATE TABLE goods(
itemid int,
itemname VARCHAR(100), 
price int,
description VARCHAR(200), 
pictureurl VARCHAR(100),
updatedate varchar(20),
PRIMARY KEY (itemid)
)engine=InnoDB DEFAULT CHARSET=utf8;

insert into goods values(1, '레몬', 500,'비타민 C가 풍부한 쓴귤', 'lemon.jpg', '2020-08-01');
insert into goods values(2, '오렌지', 1500, '비타민 C가 풍부한 당귤', 'orange.jpg', '2020-08-01');
insert into goods values(3, '키위', 2000, '비타민 C가 풍부한 다래', 'kiwi.jpg', '2020-08-01');
insert into goods values(4, '포도', 1000, '항상화 성분과 당분이 높고 무기물이 많은 과일', 'grape.jpg', '2020-08-01'); 
insert into goods values(5, '딸기', 2000, '수분함량이 높은 과일', 'strawberry.jpg', '2020-08-01');
insert into goods values(6, '무화과', 300, '칼슘, 섬유질 및 항산화 물질을 많이 함유된 식물', 'fig.jpg', '2020-08-01');
insert into goods values(7, '레몬', 500,'비타민 C가 풍부한 쓴귤', 'lemon.jpg', '2020-08-01');
insert into goods values(8, '오렌지', 1500, '비타민 C가 풍부한 당귤', 'orange.jpg', '2020-08-01');
insert into goods values(9, '키위', 2000, '비타민 C가 풍부한 다래', 'kiwi.jpg', '2020-08-01');
insert into goods values(10, '포도', 1000, '항상화 성분과 당분이 높고 무기물이 많은 과일', 'grape.jpg', '2020-08-01'); 
insert into goods values(11, '딸기', 2000, '수분함량이 높은 과일', 'strawberry.jpg', '2020-08-01');
insert into goods values(12, '무화과', 300, '칼슘, 섬유질 및 항산화 물질을 많이 함유된 식물', 'fig.jpg', '2020-08-01');
insert into goods values(13, '레몬', 500,'비타민 C가 풍부한 쓴귤', 'lemon.jpg', '2020-08-01');
insert into goods values(14, '오렌지', 1500, '비타민 C가 풍부한 당귤', 'orange.jpg', '2020-08-01');
insert into goods values(15, '키위', 2000, '비타민 C가 풍부한 다래', 'kiwi.jpg', '2020-08-01');
insert into goods values(16, '포도', 1000, '항상화 성분과 당분이 높고 무기물이 많은 과일', 'grape.jpg', '2020-08-01'); 
insert into goods values(17, '딸기', 2000, '수분함량이 높은 과일', 'strawberry.jpg', '2020-08-01');
insert into goods values(18, '무화과', 300, '칼슘, 섬유질 및 항산화 물질을 많이 함유된 식물', 'fig.jpg', '2020-08-01');
insert into goods values(19, '딸기', 2000, '수분함량이 높은 과일', 'strawberry.jpg', '2020-08-01');
insert into goods values(20, '무화과', 300, '칼슘, 섬유질 및 항산화 물질을 많이 함유된 식물', 'fig.jpg', '2020-08-01');
insert into goods values(21, '레몬', 500,'비타민 C가 풍부한 쓴귤', 'lemon.jpg', '2020-08-01');
insert into goods values(22, '오렌지', 1500, '비타민 C가 풍부한 당귤', 'orange.jpg', '2020-08-01');
insert into goods values(23, '키위', 2000, '비타민 C가 풍부한 다래', 'kiwi.jpg', '2020-08-01');
insert into goods values(24, '포도', 1000, '항상화 성분과 당분이 높고 무기물이 많은 과일', 'grape.jpg', '2020-08-01'); 
insert into goods values(25, '딸기', 2000, '수분함량이 높은 과일', 'strawberry.jpg', '2020-08-01');
insert into goods values(26, '무화과', 300, '칼슘, 섬유질 및 항산화 물질을 많이 함유된 식물', 'fig.jpg', '2020-08-01');
insert into goods values(27, '레몬', 500,'비타민 C가 풍부한 쓴귤', 'lemon.jpg', '2020-08-01');
insert into goods values(28, '오렌지', 1500, '비타민 C가 풍부한 당귤', 'orange.jpg', '2020-08-01');
insert into goods values(29, '키위', 2000, '비타민 C가 풍부한 다래', 'kiwi.jpg', '2020-08-01');
insert into goods values(30, '포도', 1000, '항상화 성분과 당분이 높고 무기물이 많은 과일', 'grape.jpg', '2020-08-01'); 

commit;

select * from goods;

2)node 프로젝트에 필요한 패키지 설치
=>npm install express morgan multer mysql cookie-parser express-session express-mysql-session dotenv compression file-stream-rotator

express: 웹 애플리케이션 서버
morgan: 로그 기록
file-stream-rotator: 로그를 일정한 주기를 가지고 파일에 기록

multer: 파일 업로드
mysql: MySQ 사용
cookie-parser: 쿠키 사용
express-session: 세션 사용
express-mysql-session: 세션을 메모리가 아닌 MySQL에 보관
dotenv: .env 파일의 내용을 process.env로 읽어와서 사용
compression: 응답을 압축해서 클라이언트에게 전송


=>npm install --save-dev nodemon
개발용으로 설치, 배포를 할 때는 포함되지 않음
개발을 할 때는 소스 코드 수정을 빈번히 하는데 그 때 마다 서버를 중지시키고 새로 시작하는 것이 번거로워서 이 모듈을 이용해서 서버의 코드를 수정하면 자동으로 반영되도록 합니다.

운영을 할 때는 서버의 코드를 수정할 때는 서버를 일시 중지하거나 별도의 컴퓨터에서 해야 합니다. 

3)프로젝트 설정
=>package.json 파일의 scripts 부분을 수정
"scripts": {
    "start": "nodemon app",
    "test": "sample"
  }

=>프로젝트에 update.txt 파일 생성 - 마지막 업데이트 된 시간을 기록해 둘 파일

=>프로젝트에 .env 파일을 만들고 운영환경에서 변경될 만 한 내용이나 보안이 필요한 데이터를 설정


PORT=9000
COOKIE_SECRET=item

HOST='127.0.0.1'
MYSQLPORT=3306
USERNAME='user00'
PASSWORD='user00'
DATABASE='node'

4)프로젝트의 Entry Point 파일에 기본 설정을 위한 코드를 추가 - App.js
const express = require('express');
const morgan = require('morgan');
const compression = require('compression');
const path = require('path');
const mysql = require('mysql');

const cookieParser = require('cookie-parser');
const session = require('express-session');
const multer = require('multer');
const dotenv = require('dotenv');

const FileStreamRotator = require('file-stream-rotator');
const fs = require('fs');
const { getFrequency } = require('file-stream-rotator');
const MySQLStore = require('express-mysql-session')(session)

//.env 파일 읽기
dotenv.config();

//서버 설정
const app = express();
app.set('port', process.env.PORT);

//로그 출력 설정
var logDirectory = path.join(__dirname, 'log');
fs.existsSync(logDirectory) || fs.mkdirSync(logDirectory);

var accessLogStream = FileStreamRotator.getStream({
    date_format:'YYYYMMDD',
    filename: path.join(logDirectory, 'access-%DATE%.log'),
    frequency:'daily',
    verbose:false
});
app.use(morgan('combined', {stream:accessLogStream}));

//압축을 해서 클라이언트에게 전송
app.use(compression());


//파라미터를 읽을 수 있도록 설정
//post 방식으로 전송된 데이터를 읽어서 req.body에 저장해주는 설정
var bodyParser = require('body-parser');
const { doesNotMatch } = require('assert');
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({
    extended:true
}))

//데이터베이스 접속 정보
var options = {
    host:'127.0.0.1',
    port:3306,
    user:'user00',
    password:'user00',
    database:'node'
};

//세션을 데이터베이스에 저장하기 위한 설정
app.use(session({
    secret:process.env.COOKIE_SECRET,
    resave:false,
    saveUninitialized:true,
    store:new MySQLStore(options)
}));

//파일 업로드를 위한 설정

//파일이 저장될 디렉토리가 없으면 생성
try{
    //디렉토리가 없으면 예외가 발생해서 catch로 이동
    fs.readdirSync('public/img');
}catch(error){
    //디렉토리 생성
    fs.mkdirSync('public/img');
}

//업로드 설정
const upload = multer({
    storage:multer.diskStorage({
        destination(req, file, done){
            //업로드할 디렉토리 결정
            //이 디렉토리는 미리 만들어져 있어야 합니다.
            done(null, 'public/img');
        },
        filename(req, file, done){
            //업로드 되는 파일 이름 결정

            //원본 파일의 확장자를 추출
            const ext = path.extname(file.originalname);
            //원본 파일 이름에 현재시간 그리고 확장자를 추가해서
            //업로드 되는 파일이름을 만들고 업로드 수행
            done(null, path.basename(file.originalname,
                ext) + Date.now() + ext);
        }
    }), limits:{fileSize:10 * 1024 * 1024}
})

//static 파일 디렉토리 설정
app.use('/', express.static('public'));

//파일을 다운로드 받을 수 있도록 설정
var util = require('util');
var mime = require('mime');

//데이터베이스 연결
var connection = mysql.createConnection(options);
connection.connect(function(err){
    if(err){
        console.log('MySQL Connection Error');
        console.log(err);
        throw err;
    }
})

//시작 요청 처리
app.get('/', (req, res, next) => {
    res.sendFile(path.join(__dirname, 'index.html'));
})

//에러가 발생했을 때 처리
app.use((err, req, res, next) => {
    console.error(err);
    res.status(500).send(err.message);
})

app.listen(app.get('port'), ()=>{
    console.log(app.get('port'), '번 포트에서 대기 중');
})


5)프로젝트에 public 디렉토리를 만들고 img 디렉토리를 만들어서 샘플 이미지를 복사


6)public 디렉토리에 index.html 파일을 만들고 작성
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>NODE_MYSQL</title>
        <link rel="stylesheet" href="/css/common.css"/>
    </head>
    <body>
        <h1>MySQL</h1>
        <a href="#" id="allbtn">데이터 전체 가져오기</a>
        <div id="content"></div>
        <div id="updatearea"></div>
    </body>
</html>

7)public 디렉토리에 css 디렉토리를 생성하고 그 안에 common.css 파일을 만들고 작성
a{
    text-decoration: none;
}

8)실행해서 css 가 적용되었는지 확인


9)전체 데이터 가져오기 구현
=>App.js 파일에 전체 데이터를 가져오는 처리를 위한 코드를 작성
//테이블의 전체 데이터 가져오는 처리
app.get('/item/all', (req, res) => {
    //읽어온 데이터를 저장할 변수를 생성
    var list;

    //전체 데이터 가져오는 SQL 실행
    connection.query('select * from goods order by itemid desc',
        function(err, results, fields){
            if(err){
                throw err;
            }
            //읽어온 데이터를 list에 저장
            list = results;

            //테이블의 데이터 개수 가져오기
            connection.query('select count(*) cnt from goods',
                function(err, results, fields){
                    //결과의 첫번째 데이터의 cnt 항목의 값을 읽어서 저장
                    var cnt = results[0].cnt;
                    //json 출력
                    res.json({'count':cnt, 'list': list});
            });
    });
});

=>index.html 파일에 전체 가져오기 요청을 처리하는 스크립트 코드를 추가
    <script>
        //출력 영역 찾아오기
        var content = 
            document.getElementById("content");
        var updatearea = 
            document.getElementById("updatearea");

        //전체 데이터 보기를 처리할 함수
        function all(){
            //alert("전체 보기")

            //ajax 객체 생성
            var request = new XMLHttpRequest();
            //요청 생성
            request.open('GET', '/item/all');
            //요청 전송
            request.send('');
            //요청에 대한 응답을 받았을 때 처리
            request.addEventListener('load', (e) => {
                //서버가 전송해준 데이터 확인
                //데이터의 종류가 XML 이면 responseXML
                //alert(request.responseText)

                //읽어온 데이터를 파싱 - JSON 파싱
                var data = JSON.parse(request.responseText);
                //alert(data.list)

                //출력할 내용을 작성
                var display = "<div align='center' class='body'>";
               
                display += "<h2>상품 목록 화면</h2>";
                display += "<table border='1'>";
                display += "<tr><td colspan='3' align='right'>" + 
                    "전체 데이터 개수:" + data.count + "</td></tr>";    

                display += "<tr class='header'>";
                display += "<th align='center' width='80'>상품ID</th>";
                display += "<th align='center' width='320'>상품이름</th>";
                display += "<th align='center' width='100'>가격</th>";
                display += "</tr>";

                for(var idx=0; idx < data.list.length; idx++){
                    var item = data.list[idx];
                    display += "<tr class='record'>";
                    display += "<td align='center'>" + item.itemid + "</td>";
                    display += "<td align='left'>" + item.itemname + "</td>";
                    display += "<td align='right'>" + item.price + " 원</td>";
                    display += "</tr>"
                }
                    
                display += "</table>";    
                display += "</div>";

                //content 영역에 display 내용을 출려
                content.innerHTML = display;



            })

        }

        //전체 데이터 보기를 클릭한 경우 처리
        document.getElementById("allbtn").addEventListener('click',
         (e) => {
            //기본 이벤트를 제거
            e.preventDefault();
            //전체보기를 위한 함수 호출
            all();
        })

    </script>

=>common.css 파일에 스타일 추가
div.body{
    overflow-y:auto;
    scrollbar-face-color: #C9BFED;
    scrollbar-shadow-color: #EDEDED;
    margin-top:50px;
    margin-bottom:50px
}

tr.header{
    background: #C9BFED;
}

tr.record{
    background: #EDEDED;
}

10)페이지 단위로 데이터 가져오기
=>페이지 단위로 데이터를 가져올 때는 페이지 번호 와 한 페이지에 출력할 데이터 개수를 알아야 합니다.
클라이언트는 서버에게 페이지 번호 와 페이징 당 출력할 데이터를 개수를 전달을 해야 합니다.

=>App.js 파일에 페이지 단위로 데이터를 전송하는 요청을 처리하는 코드를 작성
//페이지 단위로 데이터 가져오기
app.get('/item/list', (req, res) => {
    //GET 방식의 파라미터 읽어오기
    const pageno = req.query.pageno;
    const count = req.query.count;

    //MySQL 에서 페이지 단위로 데이터를 읽기 위해서는
    //데이터의 시작 인덱스 와 개수가 필요
    var start = 0;
    var size = 5;

    //데이터의 개수 설정
    if(count != undefined){
        size = parseInt(count);
    }
    //시작 인덱스 결정
    if(pageno != undefined){
        start = (parseInt(pageno) - 1) * size;
    }

    //데이터베이스 작업
    var list;
    connection.query(
        'select * from goods order by itemid desc limit ?,?',
        [start, size], function(err, results, fields){
            if(err){
                throw err;
            }
            //console.log(fields);
            list = results;
            connection.query('select count(*) cnt from goods', 
                function(err, results, fields){
                    if(err){
                        throw err;
                    }
                    var x = results[0].cnt;
                    res.json({'count':x, 'list':list});
                })
        })

})


=>index.html 파일에 페이지 단위로 가져오기 요청을 생성
<a href="#" id="listbtn">페이지 단위로 가져오기</a>

=>index.html 파일에 스크립트 코드를 추가
//기본 페이지 번호 와 데이터 개수를 설정
        var pageno = 1;
        var count = 5;

        document.getElementById("listbtn").addEventListener('click', 
            function(e){
                e.preventDefault();

                pageno = 1;
                count = 5;

                var request = new XMLHttpRequest();
                request.open('GET', 
                    '/item/list?' + 'pageno=' + pageno + '&count=' + count);
                request.send('');
                request.addEventListener('load', () => {
                    //읽어온 데이터를 파싱 - 자바스크립트 객체로 변환
                    var data = JSON.parse(request.responseText);

                    //출력할 내용을 작성
                    var display = "<div align='center' class='body'>";
               
                    display += "<h2>상품 목록 화면</h2>";
                    display += "<table border='1' id='tbldata'>";
                    display += "<tr><td colspan='3' align='right'>" + 
                        "전체 데이터 개수:" + data.count + "</td></tr>";    

                    display += "<tr class='header'>";
                    display += "<th align='center' width='80'>상품ID</th>";
                    display += "<th align='center' width='320'>상품이름</th>";
                    display += "<th align='center' width='100'>가격</th>";
                    display += "</tr>";

                    for(var idx=0; idx < data.list.length; idx++){
                        var item = data.list[idx];
                        display += "<tr class='record'>";
                        display += "<td align='center'>" + item.itemid + "</td>";
                        display += "<td align='left'>" + item.itemname + "</td>";
                        display += "<td align='right'>" + item.price + " 원</td>";
                        display += "</tr>"
                    }
                        
                    display += "</table>";    
                    display += "</div>";

                    //content 영역에 display 내용을 출려
                    content.innerHTML = display;

                    //마지막  페이지가 아니라면 더보기 버튼을 출력
                    display = "";
                    if((pageno - 1) * count < data.count){
                        display += "<table align='center' width='500' id='tblbtn'>";
                        display += "<tr id='tblbtn'>";
                        display += "<td align='center' colspan='3'>";
                        display += "<span id='addbtn'>더보기</span></td>";
                        display += "</tr></table>";
                    }
                    content.innerHTML += display;

                    //더보기 버튼은 화면에 존재할 수 도 있고 없을 수 도 있기 때문에
                    //존재하는 경우에만 이벤트 처리
                    var addbtn = document.getElementById('addbtn');
                    if(addbtn != undefined){
                        addbtn.addEventListener('click', (e) => {
                            //페이지 번호를 1증가
                            pageno = pageno + 1;
                            //데이터를 다시 요청
                            var request = new XMLHttpRequest();
                            request.open('GET', '/item/list?' + 'pageno=' + pageno + 
                                '&count=' + count);
                            request.send('');

                            request.addEventListener('load', ()=>{
                                //alert(request.responseText);
                                var data = JSON.parse(request.responseText);
                                //다음 페이지의 데이터가 없다면 더보기를 삭제
                                if(pageno*count >= data.count){
                                    pageno = pageno-1;
                                    document.getElementById('tblbtn').remove();
                                }

                                var display = "";
                                const table = document.getElementById("tbldata");
                                for(var idx=0; idx<data.list.length; idx++){
                                    var item = data.list[idx];
                                    display += "<tr class='record'>";
                                    display += "<td align='center'>" + item.itemid + "</td>";
                                    display += "<td align='left'>" + item.itemname + "</td>";
                                    display += "<td align='right'>" + item.price + " 원</td>";
                                    display += "</tr>";
                                }
                                table.innerHTML += display;
                            })

                        })
                    }


                })
        })

11)상품 상세 보기
=>기본키 나 unique 한 값을 파라미터로 전송
=>페이지 단위로 화면을 이동하는 형태라면 현재 페이지 번호를 소유하고 다니던지 아니면 상세 보기 하단에 이 데이터 의 앞 뒤 데이터 목록을 제공하는 것이 좋습니다.

=>App.js 파일에 상세보기 처리를 위한 요청 처리 코드를 작성
app.get('/item/detail', (req, res) => {
    //파리미터 읽어오기
    const itemid = req.query.itemid;
    //상세보기에 해당하는 SQL을 실행
    connection.query('select * from goods where itemid = ?',
        [itemid], function(err, results, fields){
            if(err){
                throw err;
            }
            //데이터의 존재 여부 확인
            if(results.length === 0){
                res.json({'result':false});
            }else{
                //itemid 는 primary key 이므로
                //절대로 2개 이상의 데이터가 리턴될 수 없으므로 바로 0번을
                //전송
                res.json({'result':true, 'item':results[0]});
            }
    })
})

=>index.html 파일에서 데이터 목록을 출력하는 자바스크립트  코드 부분에서 이름을 출력하는 부분을 수정 - 링크를 추가하고 id를 item아이템아이디 로 설정

display += "<td align='left'>" + "<a href='#' id='item" + item.itemid + "'>" + item.itemname + "</a></td>";
              
=>index.html 파일에 제목 링크를 눌렀을 때의 처리를 위한 스크립트 코드를 추가
자바스크립트에서는 동적으로 추가되는 항목에 직접 이벤트 처리를 할 수 없습니다.
동적으로 추가되는 데이터는 그 데이터를 감싸고 있는 부모 객체의 이벤트를 처리해야 합니다.

    document.getElementById('content').addEventListener('click',(e) =>{
            //이벤트가 발생한 객체의 id가 item으로 시작하는 경우만 수행
            if(e.target.id.startsWith("item")){
                //기본키값 생성
                //앞의 네글자를 제외하고 가져와서 공백 제거
                var itemid = e.target.id.substring(4).trim();

                //요청 전송
                var request = new XMLHttpRequest();
                request.open('GET', '/item/detail?' + 
                    'itemid=' + itemid);
                request.send('');
                request.addEventListener('load', ()=>{
                    //데이터 확인
                    //alert(request.responseText);

                    //데이터 종류를 확인해서 현재 언어의 객체로 변환
                    var data = JSON.parse(request.responseText);
                    
                    var display = '';
                    display += "<div align='center' class='body'>";
                    display += "<h2>상품 상세 보기";
                    //읽어온 데이터가 있는 경우    
                    if(data.result == true){
                        //데이터 가져오기
                        var item = data.item;

                        //출력 내용 만들기
                        display += "<table>";
                        display += "<tr><td><img src='/img/" 
                            + item.pictureurl + "'></td>";
                        display += "<td align='center'><table><tr height='50'>"
                            + "<td width='80'>상품명</td>";
                        display += "<td width='160'>" + item.itemname + "</td>";
                        display += "</tr><tr height='50'><td width='80'>가격"
                            + "</td>";
                        display += "<td width='160'>" + item.price 
                            + "원</td></tr>";  
                        display += "<tr height='50'><td width='80'>비고</td>";
                        display += "<td width='160'>" + item.description 
                            + "</td></tr>";   
                        display += "<tr><td colspan='2' align='center'" 
                            + "width='240'";
                        display += "<a href='#' id='mainbtn'>목록으로</a>" 
                         + "</td></tr></table></td></tr></table>"; 

                    }
                    //읽어온 데이터가 없는 경우
                    else{
                        display += "<p>데이터가 존재하지 않습니다.</p>";
                    }

                    content.innerHTML = display;

                    var mainbtn = document.getElementById('mainbtn');
                    if(mainbtn != undefined){
                        mainbtn.addEventListener('click', (e) => {
                            document.getElementById('listbtn').click();
                        })
                    }

                })
            }
        })

12)데이터 삽입
=>데이터 삽입 화면으로 이동(GET) 하고 데이터를 입력한 후 전송해서(POST) 삽입을 처리
=>일련 번호 생성
MySQL 의 Auto_Increment 나 Oracle 의 Sequence 이용

가장 큰 일련번호를 찾아서 +1을 해서 설정


=>삽입 화면을 위한 insert.html 파일을 public 디렉토리에 생성
<div>
    <p></p>
    <form method="post" id="insertform"
        enctype="multipart/form-data">
        아이템이름<input type="text" name="itemname"
        id="itemname"/><br/>
        가격<input type="text" name="price"
        id="price"/><br/>
        설명<input type="text" name="description"
        id="description"/><br/>
        이미지<input type="file" name="pictureurl"
        id="pictureurl"/><br/>
        <input type="submit" value="삽입"/>
    </form>
</div>

=>App.js 파일에 삽입 화면을 보여주는 처리를 위한 코드를 추가
app.get('/item/insert', (req, res) => {
    fs.readFile('public/insert.html',
         function(err, data){
            res.end(data);
    })
})

=>index.html 파일에 삽입 화면 출력을 위한 요청을 생성
<a href="#" id="insertbtn">데이터 삽입</a>

=>index.html 파일에 데이터 삽입 링크를 눌렀을 때 수행할 코드를 스크립트에 작성
    document.getElementById("insertbtn")
            .addEventListener('click', (e) => {
                //기본 이벤트 제거
                e.preventDefault();
                //이벤트가 부모에게 전달되는 것을 막기
                e.stopPropagation();

                var request = new XMLHttpRequest();
                request.open('GET', '/item/insert');
                request.send('');
                request.addEventListener('load', ()=>{
                    //alert(request.responseText)
                    content.innerHTML = '';
                    updatearea.innerHTML = request.responseText;
                })
        })


=>App.js 삽입 작업을 처리하는 코드를 작성
app.post('/item/insert', upload.single('pictureurl'), 
    (req, res) => {
        //파라미터 읽기
        const itemname = req.body.itemname;
        const price = req.body.price;
        const description = req.body.description;

        //파일 파라미터 값을 읽어오기
        var pictureurl;
        if(req.file){
            pictureurl = req.file.filename;
        }else{
            pictureurl = "default.jpg";
        }

        //가장 큰 itemid를 찾아와서 itemid 를  생성
        connection.query(
            'select max(itemid) maxid from goods', 
            function(err, results, fields){
                if(err){
                    throw err;
                }
                var itemid;
                if(results.length > 0 ){
                    itemid = results[0].maxid + 1;
                }else{
                    itemid = 1;
                }

                //년월일 시분초 만들기
                var date = new Date();

                var year = date.getFullYear();

                var month = date.getMonth() + 1;
                month = month >= 10 ? month :'0'+ month;

                var day = date.getDate();
                day = day >= 10 ? day : '0' + day;

                var hour = date.getHours();
                hour = hour >= 10 ? hour : '0' + hour;

                var minute = date.getMinutes();
                minute = minute >= 10 ? minute : '0' + minute;

                var second = date.getSeconds();
                second = second >= 10 ? second : '0' + second;

                //삽입하는 SQL 실행
                connection.query(
                    "insert into goods(itemid,itemname," 
                        + "price,description,pictureurl,updatedate) " 
                        + "values(?,?,?,?,?,?)", 
                        [itemid, itemname, price, description, pictureurl,
                        year+'-'+month+'-'+day], 
                            function(err, results, fields){
                                if(err){
                                    throw err;
                                }
                                //영향받은 행이 있다면 - 성공
                                if(results.affectedRows >= 0){
                                    //마지막 작업 시간을 파일에 기록
                                    const writeStream = fs.createWriteStream('./update.txt');
                                    writeStream.write(year+'-'+month+'-'+day+' '
                                        +hour+':'+minute+':'+second);
                                        writeStream.end();

                                    res.json({'result':true});
                                }else{
                                    res.json({'result':false});
                                }
                })

        })
})

=>index.html 파일의 삽입 요청 스크립트 코드를 수정
document.getElementById("insertbtn")
            .addEventListener('click', (e) => {
                //기본 이벤트 제거
                e.preventDefault();
                //이벤트가 부모에게 전달되는 것을 막기
                e.stopPropagation();

                var request = new XMLHttpRequest();
                request.open('GET', '/item/insert');
                request.send('');
                request.addEventListener('load', ()=>{
                    //alert(request.responseText)
                    content.innerHTML = '';
                    updatearea.innerHTML = request.responseText;

                    //form 찾아오기
                    var f = document.getElementById("insertform");
                    if(f != undefined){
                        f.addEventListener('submit', (e) => {
                            e.preventDefault();
                            //Form에 입력된 데이터 가져오기
                            const formData = new FormData(
                                document.getElementById("insertform")
                            );

                            var xhr = new XMLHttpRequest();
                            xhr.open('POST', '/item/insert', true);
                            xhr.send(formData);

                            xhr.addEventListener('load', () => {
                                var data = JSON.parse(xhr.responseText);
                                //데이터 삽입에 성공하면
                                if(data.result){
                                    updatearea.innerHTML = '';
                                    document.getElementById("listbtn").click();
                                }
                                //데이터 삽입에 실패하면
                                else{
                                    alert('삽입 실패');
                                }
                            })

                        })
                    }

                })
        })



13)데이터 삭제
=>삭제를 구현하는 방법은 두가지
실제 데이터 삭제를 하는 방법

삭제 여부를 나타내는 컬럼을 추가한 후 삭제를 하면 이 컬럼의 변경해두고 데이터를 조회할 때 삭제된 컬럼은 조회가 안되도록 하는 방법

=>App.js 파일에 삭제 처리를 위한 코드를 추가
app.post('/item/delete', (req, res) => {
    //삭제를 위한 파라미터 읽기
    const itemid = req.body.itemid;
    connection.query('delete from goods where itemid=?',
    [itemid], function(err, results, fields){
        if(results.affectedRows >= 0){
            res.send({'result':true});
        }else{
            res.send({'result':false});
        }
    })
})

=>index.html 파일의 상세보기 처리 코드를 수정해서 삭제를 구현
        document.getElementById('content').addEventListener('click',(e) =>{
            //이벤트가 발생한 객체의 id가 item으로 시작하는 경우만 수행
            if(e.target.id.startsWith("item")){
                //기본키값 생성
                //앞의 네글자를 제외하고 가져와서 공백 제거
                var itemid = e.target.id.substring(4).trim();

                //요청 전송
                var request = new XMLHttpRequest();
                request.open('GET', '/item/detail?' + 
                    'itemid=' + itemid);
                request.send('');
                request.addEventListener('load', ()=>{
                    //데이터 확인
                    //alert(request.responseText);

                    //데이터 종류를 확인해서 현재 언어의 객체로 변환
                    var data = JSON.parse(request.responseText);
                    
                    var display = '';
                    display += "<div align='center' class='body'>";
                    display += "<h2>상품 상세 보기";
                    //읽어온 데이터가 있는 경우    
                    if(data.result == true){
                        //데이터 가져오기
                        var item = data.item;

                        //출력 내용 만들기
                        display += "<table>";
                        display += "<tr><td><img src='/img/" 
                            + item.pictureurl + "'></td>";
                        display += "<td align='center'><table><tr height='50'>"
                            + "<td width='80'>상품명</td>";
                        display += "<td width='160'>" + item.itemname + "</td>";
                        display += "</tr><tr height='50'><td width='80'>가격"
                            + "</td>";
                        display += "<td width='160'>" + item.price 
                            + "원</td></tr>";  
                        display += "<tr height='50'><td width='80'>비고</td>";
                        display += "<td width='160'>" + item.description 
                            + "</td></tr>";   
                        display += "<tr><td colspan='2' align='center'" 
                            + "width='240'";
                        display += "<a href='#' id='mainbtn'>목록으로</a>" 
                         + "</td></tr></table></td></tr>";
                        
                        display += "<tr><td colspan='2'" 
                            +" align='center' width='240'>";
                        display += "<a href='#' id='deletebtn'>";
                        display += "데이터 삭제</a></td></tr>";


                        display += "</table>";

                    }
                    //읽어온 데이터가 없는 경우
                    else{
                        display += "<p>데이터가 존재하지 않습니다.</p>";
                    }

                    content.innerHTML = display;

                    //목록으로 버튼을 눌렀을 때 처리
                    var mainbtn = document.getElementById('mainbtn');
                    if(mainbtn != undefined){
                        mainbtn.addEventListener('click', (e) => {
                            document.getElementById('listbtn').click();
                        })
                    }

                    //삭제를 눌렀을 때의 처리
                    var deletebtn = document.getElementById("deletebtn");
                    if(deletebtn != undefined){
                        deletebtn.addEventListener('click', (e) => {
                            e.preventDefault();
                            //itemid 가져오기
                            var itemid = data.item.itemid;

                            request = new XMLHttpRequest();
                            request.open('POST', '/item/delete', true);

                            var params = 'itemid=' + itemid;
                            request.setRequestHeader('Content-type',
                                'application/x-www-form-urlencoded');
                            request.send(params);

                            request.addEventListener('load', ()=>{
                                var data = JSON.parse(request.responseText);
                                if(data.result){
                                    alert("삭제 성공");
                                    updatearea.innerHTML = '';
                                    document.getElementById('listbtn').click();
                                }else{
                                    alert('삭제 실패');
                                }
                            });
                        })
                    }


                })
            }
        })

14)데이터 수정
=>상세 보기에서 데이터를 수정하겠다고 하면 데이터를 수정할 수 있는 화면으로 이동하고 실제 데이터 수정 작업을 수행

=>데이터 수정을 위한 update.html 파일을 public 디렉토리에 생성
<form method="post" id="updateform" enctype="multipart/form-data">
    아이템 아이디<input type="text" name="itemid"
    id="itemid" />    
    아이템이름<input type="text" name="itemname"
        id="itemname"/><br/>
    가격<input type="text" name="price"
        id="price"/><br/>
    설명<input type="text" name="description"
        id="description"/><br/>
    
    새로운 이미지<input type="file" name="pictureurl"
        id="pictureurl"/><br/>
    
    이전 이미지<img width="100" height="100"
    id="picture" /><br/>
    <input type="hidden" name="oldpictureurl"
    id="oldpictureurl" /><br />
        
    <input type="submit" value="수정"/>
</form>

=>App.js 파일에 수정 보기 요청을 처리하는 코드를 추가
app.get('/item/update', (req, res) => {
    fs.readFile('public/update.html', function(err,data){
        res.end(data);
    })
})

=>App.js 파일에 수정 처리 요청을 처리하는 코드를 추가
app.post('/item/update', upload.single('pictureurl'),
    (req, res) => {
        //파라미터 가져오기
        const itemid = req.body.itemid;
        const itemname = req.body.itemname;
        const price = req.body.price;
        const description = req.body.description;
        const oldpictureurl = req.body.oldpictureurl;

        //새로운 파일을 선택하면 pictureurl을 변경하고
        //새로운 파일을 선택하지 않으면 이전 이름 그대로
        var pictureurl;
        if(req.file){
            pictureurl = req.file.filename;
        }else{
            pictureurl = oldpictureurl;
        }

        connection.query('update goods set itemname=?, ' 
            + 'price=?, description=?, pictureurl=? '
            + 'where itemid=?', 
            [itemname, price, description, pictureurl,itemid],
            function(err, results, fields){
                if(err){
                    throw err;
                }

                if(results.affectedRows >= 0){
                    res.json({"result":true});
                }else{
                    res.json({"result":false});
                }
            })
})


=>index.html 파일에서 상세보기 처리 부분의 스크립트를 수정해서 수정 보기 요청을 처리
       document.getElementById('content').addEventListener('click',(e) =>{
            //이벤트가 발생한 객체의 id가 item으로 시작하는 경우만 수행
            if(e.target.id.startsWith("item")){
                //기본키값 생성
                //앞의 네글자를 제외하고 가져와서 공백 제거
                var itemid = e.target.id.substring(4).trim();

                //요청 전송
                var request = new XMLHttpRequest();
                request.open('GET', '/item/detail?' + 
                    'itemid=' + itemid);
                request.send('');
                request.addEventListener('load', ()=>{
                    //데이터 확인
                    //alert(request.responseText);

                    //데이터 종류를 확인해서 현재 언어의 객체로 변환
                    var data = JSON.parse(request.responseText);
                    
                    var display = '';
                    display += "<div align='center' class='body'>";
                    display += "<h2>상품 상세 보기";
                    //읽어온 데이터가 있는 경우    
                    if(data.result == true){
                        //데이터 가져오기
                        var item = data.item;

                        //출력 내용 만들기
                        display += "<table>";
                        display += "<tr><td><img src='/img/" 
                            + item.pictureurl + "'></td>";
                        display += "<td align='center'><table><tr height='50'>"
                            + "<td width='80'>상품명</td>";
                        display += "<td width='160'>" + item.itemname + "</td>";
                        display += "</tr><tr height='50'><td width='80'>가격"
                            + "</td>";
                        display += "<td width='160'>" + item.price 
                            + "원</td></tr>";  
                        display += "<tr height='50'><td width='80'>비고</td>";
                        display += "<td width='160'>" + item.description 
                            + "</td></tr>";   
                        display += "<tr><td colspan='2' align='center'" 
                            + "width='240'";
                        display += "<a href='#' id='mainbtn'>목록으로</a>" 
                         + "</td></tr></table></td></tr>";
                        
                        display += "<tr><td colspan='2'" 
                            +" align='center' width='240'>";
                        display += "<a href='#' id='deletebtn'>";
                        display += "데이터 삭제</a>";
                        display += "<a href='#' id='updatebtn'>";
                        display += "데이터 수정</a>"
                        display += "</td></tr>";


                        display += "</table>";

                    }
                    //읽어온 데이터가 없는 경우
                    else{
                        display += "<p>데이터가 존재하지 않습니다.</p>";
                    }

                    content.innerHTML = display;

                    //목록으로 버튼을 눌렀을 때 처리
                    var mainbtn = document.getElementById('mainbtn');
                    if(mainbtn != undefined){
                        mainbtn.addEventListener('click', (e) => {
                            document.getElementById('listbtn').click();
                        })
                    }

                    //수정을 눌렀을 때의 처리
                    var updatebtn = document.getElementById("updatebtn");
                    if(updatebtn != undefined){
                        updatebtn.addEventListener('click', (e) => {
                            e.preventDefault();
                            e.stopPropagation();

                            request = new XMLHttpRequest();
                            request.open('GET', '/item/update');
                            request.send('');
                            request.addEventListener('load', () => {
                                content.innerHTML = '';
                                updatearea.innerHTML = request.responseText;

                                var item = data.item;
                                document.getElementById('itemid').value = 
                                    item.itemid;
                                document.getElementById('itemid').readOnly = 
                                    true;
                                document.getElementById('itemname').value = 
                                    item.itemname;
                                document.getElementById('price').value = 
                                    item.price;
                                document.getElementById('description').value = 
                                    item.description;

                                document.getElementById('oldpictureurl').value = 
                                    item.pictureurl;
                                document.getElementById("picture").src = 
                                    "/img/" + item.pictureurl;

                                var f = document.getElementById("updateform");
                                if(f != undefined){
                                    f.addEventListener('submit', (e) => {
                                        e.preventDefault();

                                        const formData = new FormData(
                                            document.getElementById('updateform'));
                                        var xhr = new XMLHttpRequest();
                                        xhr.open('POST', '/item/update');
                                        xhr.send(formData);
                                        xhr.addEventListener('load', () => {
                                            var data = JSON.parse(xhr.responseText);
                                            if(data.result){
                                                updatearea.innerHTML = '';
                                                document.getElementById('listbtn').click();
                                            }else{
                                                alert('수정 실패');
                                            }
                                        })

                                    })
                                }

                            })
                        })
                    }

                    //삭제를 눌렀을 때의 처리
                    var deletebtn = document.getElementById("deletebtn");
                    if(deletebtn != undefined){
                        deletebtn.addEventListener('click', (e) => {
                            e.preventDefault();
                            //itemid 가져오기
                            var itemid = data.item.itemid;

                            request = new XMLHttpRequest();
                            request.open('POST', '/item/delete', true);

                            var params = 'itemid=' + itemid;
                            request.setRequestHeader('Content-type',
                                'application/x-www-form-urlencoded');
                            request.send(params);

                            request.addEventListener('load', ()=>{
                                var data = JSON.parse(request.responseText);
                                if(data.result){
                                    alert("삭제 성공");
                                    updatearea.innerHTML = '';
                                    document.getElementById('listbtn').click();
                                }else{
                                    alert('삭제 실패');
                                }
                            });
                        })
                    }


                })
            }
        })

15)업데이트 된 시간을 JSON으로 출력하기
=>마지막 업데이트 된 시간을 기록한 파일의 내용을 읽어서 전송
클라이언트 서버 시스템을 구현할 때 클라이언트가 서버의 데이터를 받아서 출력하는 구조로 만드는데 네트워크 연결이 안될 때 어떻게 할 것인지에 대해서 생각을 해봐야하고 데이터의 변경이 이루어지지 않은 경우의 데이터 출력에 대해서도 생각을 해봐야 합니다.

네트워크가 연결되지 않은 상태에서도 데이터를 출력하고자 한다면 서버의 데이터를 클라이언트에 저장해두고 출력하는 구조를 생각해봐야 합니다.

이전과 동일한 데이터라면 클라이언트 내부에 저장한 데이터를 사용하고 그렇지 않은 경우 서버에서 다운로드 받아서 사용하고자 하는 경우에는 서버 와 클라이언트 모두에 마지막 업데이트 된 시각을 기록해두고 2개의 시간이 다르면 서버로부터 데이터를 다시 받아오고 그렇지 않으면 클라이언트의 데이터를 출력하는 구조로 만들어주면 됩니다.

=>App.js 파일에 구현
app.get('/item/date', (req, res) => {
    fs.readFile('./update.txt', function(err, data){
        res.json({'result': data.toString()});
    })
})

5.ORM
1)ORM(Object Relation Mapping) 의 개념
=>객체 지향 패러다임을 관계형 데이터베이스에 보존하는 기술
=>프로그래밍 언어의 객체 와 관계형 데이터베이스의 하나의 행을 매핑시키는 기술
=>프로그래밍 언어의 Class 와 관계형 데이터베이스의 Table 그리고 Instance 와 Row 가 유사한 개념이라는데에서 출발
=>ORM을 사용하게 되면 관계형 데이터베이스 종류가 변경되더라도 소스 코드를 변경할 필요가 없고 설정만 변경하면 됩니다.
SQL을 직접 사용하지 않고 함수를 호출하는 형태로 데이터베이스를 사용하도록 해서 프레임워크가 내부적으로 설정 파일을 참조해서 SQL을 생성해서 수행하기 때문
=>In Memory Database 개념으로 동작을 하기 때문에 수행 속도가 빠릅니다.
Node 에서는 sequelize 를 많이 이용하고 Spring 에서는 JPA(표준 스펙이고 실제 구현체는 Hibernate) 그리고 각 프로그래밍 언어마다 여러가지 프레임워크를 제공

2)MySQL 을 Sequelize 를 이용해서 사용
=>패키지를 설치: sequelize, sequelize-cli, mysql2(사용하고자 하는 관계형 데이터베이스로 변경)
npm(관리 개념) install sequelize sequelize-cli mysql2

npm 의 기능을 업그레이드 한 yarn 도 있고 npx 도 있습니다.

=>sequelize 초기화: npx(실행) sequelize init
config, migration, models, seeders 라는 디렉토리가 생성됨

=>models 디렉토리에 있는 index.js(config.json 파일의 내용을 호출해서 데이터베이스 사용 설정을 수행해주는 파일) 파일을 수정

const Sequelize = require('sequelize');
const env = process.env.NODE_ENV || 'development';
const config = require('../config/config')[env];
const db = {};

const sequelize = new Sequelize(config.database, config.username, config.password, config);

db.sequelize = sequelize;

module.exports = db;

=>config.json 파일의 데이터베이스 접속 정보를 수정
{
  "development": {
    "username": "user00",
    "password": "user00",
    "database": "node",
    "host": "127.0.0.1",
    "dialect": "mysql"
  },
  "test": {
    "username": "user00",
    "password": "user00",
    "database": "node",
    "host": "127.0.0.1",
    "dialect": "mysql"
  },
  "production": {
    "username": "user00",
    "password": "user00",
    "database": "node",
    "host": "127.0.0.1",
    "dialect": "mysql"
  }
}

=>App.js 파일에 접속을 확인하기 위한 코드를 추가하고 실행
//sequelize 추출
const {sequelize} = require('./models');

sequelize.sync({force:false})
.then(()=>{
    console.log("데이터베이스 연결 성공");
})
.catch((err) => {
    console.error(err);
})

=>테이블 과 매핑할 모델 생성
models 디렉토리에 생성
Sequelize.Model 클래스를 상속한 클래스로 생성

연동할 테이블 과 관련된 static init 메서드 와 연관된 테이블 과 관련된 static associate 메서드를 오버라이딩을 합니다.

static init 메서드
	 - 첫번째 매개변수: 컬럼에 대한 설정
	 - 두번째 매개변수: 테이블에 대한 옵션 설정
		sequelize: db.sequelize 를 연결
		timestamps: true로 설정하면 테이블에 createdAt 과 updatedAt 컬럼을 추가해서 데이터가 추가될 때 와 수정될 때의 시간을 자동으로 추가합니다.
		underscored: 기본은 테이블 이름 과 컬럼 이름을 camel 표기법으로 설정하는데 true로 설정하면 snake 표기법으로 변경 
		modelName: 모델 이름을 설정
		tableName: 연결할 테이블 이름
		paranoid: true 로 설정하면 deletedAt 이라는 컬럼이 추가되고 데이터를 삭제하면 이 컬럼에 삭제된 시간을 기록하고 select 할 때 제외합니다.
		charset 과 collate: 인코딩 설정으로 utf8 과 utf8_general_ci 로 설정하는데 이모티콘도 데이터로 추가할 것이라면 utf8mb4 와 utf8mb4_general_ci로 설정

static associate 메서드
	자신의모델이름.hasMany 나 belongsTo를 를 이용해서 외래키를 설정

=>goods 테이블 과 연동할 model 파일을 생성 - models/item.js
const Sequelize = require('sequelize')

module.exports = class Item extends Sequelize.Model{
    static init(sequelize) {
        return super.init({
            itemid:{
                type:Sequelize.INTEGER.UNSIGNED,
                allowNull:false,
                unique:true
            },
            itemname:{
                type:Sequelize.STRING(100),
                allowNull:true
            },
            price:{
                type:Sequelize.INTEGER.UNSIGNED,
                allowNull:true
            },
            description:{
                type:Sequelize.STRING(200),
                allowNull:true
            },
            pictureurl:{
                type:Sequelize.STRING(100),
                allowNull:true
            },
            updatedate:{
                type:Sequelize.STRING(20),
                allowNull:true
            }
        },{
            sequelize,
            timestamps:false,
            underscored:false,
            modelName:'Item',
            tableName:'goods',
            paranoid:false,
            charset:'utf8',
            collate:'utf8_general_ci'
        })
    }
}

=>models 디렉토리의 index.js 에 생성한 모델에 대한 설정을 추가
const Sequelize = require('sequelize');

const Item = require('./item');

const env = process.env.NODE_ENV || 'development';
const config = require('../config/config')[env];
const db = {};

const sequelize = new Sequelize(config.database, config.username, config.password, config);

db.sequelize = sequelize;
db.Sequelize = Sequelize

db.Item = Item;

Item.init(sequelize);

module.exports = db;

=>App.js 파일에 models 를 import
const {Item} = require('./models');

=>App.js 에서 삽입 요청을 처리하는 코드를 수정
app.post('/item/insert', upload.single('pictureurl'), 
    async(req, res) => {
        //파라미터 읽기
        const itemname = req.body.itemname;
        const price = req.body.price;
        const description = req.body.description;

        //파일 파라미터 값을 읽어오기
        var pictureurl;
        if(req.file){
            pictureurl = req.file.filename;
        }else{
            pictureurl = "default.jpg";
        }

        var itemid = 1;
        try{
            var x = await Item.max('itemid');
            itemid = x + 1
        }catch(err){
            console.log(err);
        }
        //데이터 삽입
        Item.create({
            itemid:itemid,
            itemname:itemname,
            price:price,
            description:description,
            pictureurl:pictureurl
        })
})


=>기존의 테이블 과 연동을 할 때는 기존의 테이블에 id 라는 속성으로 숫자 컬럼이 존재해야 합니다.
기존 테이블을 수정
drop table goods;

CREATE TABLE goods(
id int not null auto_increment,
itemid int,
itemname VARCHAR(100), 
price int,
description VARCHAR(200), 
pictureurl VARCHAR(100),
updatedate varchar(20),
PRIMARY KEY (id)
)engine=InnoDB DEFAULT CHARSET=utf8;

=>서버를 실행해서 데이터 삽입을 수행



















