**데이터베이스
=>반 영구적으로 데이터를 저장하고 관리하기 위한 도구 중의 하나가 DBMS(Data Base Management System)
=>분류
RDBMS(관계형 데이터베이스 - 테이블 기반): SQL을 이용해서 데이터베이스 작업을 수행
 대표적인 시스템으로 Oracle(공공 기관 이나 대기업 군에서 사용), MySQL(중소 기업이나 중견 기업에서 많이 사용, Linux Fork 가 Maria DB), MSSQL, HANA DB, Access, Tibero, Postgre SQL 등 

NoSQL(Not Only SQL): SQL 을 이용하지 않는 데이터베이스 전체를 통칭
 빅데이터 분야 나 스타트업에서 많이 사용, Serverless(서버 프로그래밍을 하지 않아도 데이터 연동이 가능한 방식으로 구글의 firebase 가 대표적) 라고 부르는 방식도 대부분 NoSQL
 가장 유명한 NoSQL이 Mongo DB

**MySQL
1.특징
=>SQL에 기반을 둔 DBMS
=>리눅스의 표준 데이터베이스 였지만 지금은 Oracle이 인수해서 동일한 엔진으로 구현된 Maria DB 가 리눅스의 표준 데이터베이스
=>버전
 Standard, Enterprise, Cluster CGE - 상용화 된 버전
 Community - 무료
=>작업 단위
오라클: sid(service) - user
MySQL: database - user(여러 명의 유저가 하나의 database 공유 가능)

2.설치 
1)운영체제에 직접 설치
=>windows: 설치 파일을 다운로드 받아서 설치
https://dev.mysql.com/downloads/mysql/ 에서 다운로드

=>mac 이나 linux: 패키지 관리자를 이용해서 설치하는 것을 권장
mac 은 brew: brew install mysql - 관리자 계정은 root 비밀번호는 없음

MySQL 시작 : brew services start mysql
MySQL 중지 : brew services stop mysql

2)가상화 머신에 설치 - docker
docker pull mysql

3.접속 도구
=>데이터베이스 사용을 위해서는 접속할 수 있는 데이터베이스 서버 와 접속을 위한 프로그램
=>데이터베이스 서버를 설치하게 되면 기본 접속 프로그램을 제공
=>대부분의 프로그래머는 별도의 접속 프로그램을 설치해서 사용

4.데이터베이스 관련 명령
1)데이터베이스 확인
show databases;

2)데이터베이스 생성
create database 데이터베이스이름;

3)데이터베이스 삭제
drop database 데이터베이스이름;

4)데이터베이스 사용
use 데이터베이스이름;

5.MySQL 유저 생성
1)유저 생성
create user '유저이름'@'%' identified by '비밀번호';

2)관리자 권한 부여
grant all privileges on *.* to '유저이름'@'%';

*.* 은 모든 데이터베이스를 의미하는데 특정 데이터베이스로 한정하고자 하면 데이터베이스 이름을 입력하면 됩니다.

%는 접속 위치로 %를 설정하면 모든 곳에서 접속이 가능하고 localhost 라고 작성하면 현재 컴퓨터에서만 그리고 아이피를 입력하면 아이피에 해당하는 곳에서만 사용 가능

3)변경 내용 적용
flush privileges;

6.SQL을 연습하기 위한 샘플 데이터 입력
-- 데이터베이스 확인
show databases;

-- 데이터베이스 생성 - adam 대신 다른 이름 사용 
create database adam;

-- 데이터베이스 사용
use adam;


--회원테이블
create table usertbl(
userid char(15) not null primary key,
name varchar(20) not null,
birthyear int not null, 
addr char(100),
mobile char(11),
mdate date)ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;

--구매테이블
create table buytbl(
num int auto_increment primary key,
userid char(8) not null,
productname char(10),
groupname char(10),
price int not null,
amount int not null,
foreign key (userid) references usertbl(userid) on delete cascade)ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;


--데이터 삽입
insert into usertbl values('kty', '김태연',1989,'전주','01011111111', '1989-3-9');
insert into usertbl values('bsj', '배수지',1994,'광주','01022222222', '1994-10-10');
insert into usertbl values('ksh', '김설현',1995,'부천','01033333333', '1995-1-3');
insert into usertbl values('bjh', '배주현',1991,'대구','01044444444', '1991-3-29');
insert into usertbl values('ghr', '구하라',1991,'광주','01055555555', '1991-1-13');
insert into usertbl values('san', '산다라박',1984,'부산','01066666666', '1984-11-12');
insert into usertbl values('jsm', '전소미',2001,'캐나다','01077777777', '2001-3-9');
insert into usertbl values('lhl', '이효리',1979,'서울','01088888888', '1979-5-10');
insert into usertbl values('iyou', '아이유',1993,'서울','01099999999', '1993-5-19');
insert into usertbl values('ailee', '에일리',1989,'미국','01000000000', '1989-5-30');

commit;

insert into buytbl values(null, 'kty', '운동화', '잡화', 30, 2);
insert into buytbl values(null, 'kty', '노트북', '전자', 1000, 1);
insert into buytbl values(null, 'jsm', '운동화', '잡화', 30, 1);
insert into buytbl values(null, 'lhl', '모니터', '전자', 200, 1);
insert into buytbl values(null, 'bsj', '모니터', '전자', 200, 1);
insert into buytbl values(null, 'kty', '청바지', '잡화', 100, 1);
insert into buytbl values(null, 'lhl', '책', '서적', 15, 2);
insert into buytbl values(null, 'iyou', '책', '서적', 15, 7);
insert into buytbl values(null, 'iyou', '컴퓨터', '전자', 500, 1);
insert into buytbl values(null, 'bsj', '노트북', '전자', 1000, 1);
insert into buytbl values(null, 'bjh', '메모리', '전자', 50, 4);
insert into buytbl values(null, 'ailee', '운동화', '잡화', 30, 2);
insert into buytbl values(null, 'ghr', '운동화', '잡화', 30, 1);

commit;

show tables;

7.Select(조회)
1)기본 구조
5 - select : *(all), distinct(중복 제거) 컬럼이름이나 표현식 나열
1 - from	: 테이블 이름을 다른 이름 과 함께 나열하거나 SELECT 구문 사용(Inline View)
2 - [where] : 조건 - 테이블의 데이터를 수평으로 분할
3 - [group by] : 그룹화 할 컬럼 이나 표현식
4 - [having] : 그룹화 이후에 조건으로 테이블의 데이터를 수평으로 분할
6 - [order by] : 정렬할 컬럼 이나 표현식 또는 인덱스를 나열하고 정렬 방법을 기재
7 - [limit]: offset 과 count를 지정해서 offset 부터 count 만큼의 행을 추출

=>from 절에서 테이블 이름 다음에 작성하는 이름은 테이블 이름을 변경하는 것 과 같은 효과
=>select 절에서도 컬럼 이름이나 표현식 다음에 다른 이름을 부여할 수 있는데 이 경우는 별명과 같은 효과를 나타냅니다.
=>order by 는 필수가 아니지만 데이터가 2 행 이상 리턴될 것 같으면 작성하는 것이 좋고 인덱스를 이용해서 order by 없이 정렬하는 것도 고려

2)테이블의 전체 데이터 조회
select *
from 테이블이름;

=>usertbl 테이블의 전체 데이터 조회
select *
from usertbl;

3)테이블에서 특정 컬럼 들만 추출
select 컬럼 이름 나열
from 테이블이름;

=>usertbl 테이블에서 name, addr 컬럼 조회
select name, addr
from usertbl;

4)select 절에서는 표현식(연산식)을 사용할 수 있음

5)별명을 부여할 수 있는데 별명을 부여할 때는 하나의 공백을 두고 입력하면 됩니다.
=>별명에 공백이 있을 때는 ' '로 감싸야 합니다.
=>여기서 부여한 별명은 order by 절에서만 사용 가능

select name 이름, addr 주소
from usertbl;

6)연산자
=> >, >=, <, <=: 크기비교 연산자로 문자열(앞 글자 부터의 코드 값을 가지고 비교) 과 날짜(1970년 1월 1일을 0으로 해서 하루가 지날 때 마다 1을 추가하는 형태로 숫자로 만들어서 비교)도 크기 비교 가능

=> =, !=(<>): 항등 연산자

=> between A and B: A 와 B 사이의 데이터를 의미하는데 반드시 B 가 A 보다 크거나 같아야 합니다.

=> in: 여러 개의 데이터를 ( ) 안에 나열해서 ( )에 나열된 값 중 하나랑 일치

=> is null: null 데이터 조회

=> not을 추가해서 반대로의 의미:  not between A and B, not in, is not null

=> and(그리고), or(또는)
and(&&) 나 or(||) 는 뒤의 내용이 수행이 안되는 경우가 있음
and 의 경우는 앞의 표현식 결과가 false 이면 뒤의 표현식은 수행하지 않음
or 의 경우는 앞의 표현식 결과가 true 이면 뒤의 표현식은 수행하지 않음

usertbl 테이블에서 name 이 김태연 인 데이터 조회
	select *
	from usertbl
	where name = '김태연';

usertbl 테이블에서 birthyear 가 1990 년 이후이고 addr 이 서울 인 데이터 조회
	select *
	from usertbl
	where birthyear >= 1990 and addr = '서울';

=>like: 패턴 일치
%: 0개 이상의 문자열
_: 한 글자
escape 문자: \ - % 나 _ 를 검색할 때 앞에 붙여주는 문자
': ''

usertbl 테이블에서 name 에 라 라는 글자가 포함된 경우 조회
	select *
	from usertbl
	where name like '%라%';

usertbl 테이블에서 name 이 배로 시작하는 데이터 조회
	select *
	from usertbl
	where name like '배%';

usertbl 테이블에서 name 이 4글자인 데이터 조회
	select *
	from usertbl
	where name like '____';


7)subquery
=>SQL 구문 안에 다른 SQL 이 포함된 경우

=>위치에 따른 분류
where 절: subquery 라고 합니다.
from 절: inline view 라고 합니다.

=>리턴되는 행의 개수에 따른 분류
0개 나 1개가 리턴되는 경우: 단일 행 서브 쿼리
2개이상의 행이 리턴되는 경우: 다중 행 서브 쿼리 

=>서브 쿼리는 메인 쿼리가 수행되기 전에 1번만 수행됨
=>서브 쿼리는 반드시 ( ) 안에 작성해야 합니다.
=>다중 행 서브 쿼리의 경우 단일 행 연산자를 사용하면 안되고 다중 행 연산자를 사용해야 합니다.
=>다중 행 연산자: ANY, ALL, IN, NOT IN 


usertbl 테이블에서 name 이 김태연인 데이터보다 birthyear 가 크거나 같은 데이터를 조회

select *
from usertbl
where birthyear >= (select birthyear 
	from usertbl
	where name = '김태연');

buytbl 테이블에서 userid 가 kty 인 데이터가 구매한 productname 과 동일한 제품을 구매한 userid를 조회

select userid
from buytbl
where productname = (select productname
	from buytbl
	where userid = 'kty');

에러 - 서브 쿼리가 2개 이상의 행을 리턴하는데 =(단일 행 연산자) 로 비교
이런 경우에는 = 안되고 in 이나 not in을 사용해야 함

select distinct userid
from buytbl
where productname in (select productname
	from buytbl
	where userid = 'kty') and userid != 'kty';


8)order by
=>정렬을 위한 절
=>컬럼 이름 이나 표현식 또는 컬럼 이름 의 별명 그리고 인덱스를 이용하는 것이 가능
=>이름 뒤에 ASC를 입력하면 오름차순이고 DESC 를 입력하면 내림차순
기본은 ASC
=>NULL 은 가장 작은 값으로 간주

usertbl 테이블의 데이터를 birthyear 의 오름차순으로 조회하고 birthyear 의 값이 동일하면 name 의 내림차순으로 조회

select *
from usertbl
order by birthyear asc, name desc;

9)distinct
=>select 절에서 맨 앞에 사용할 수 있는 예약어로 중복을 제거
=>1번만 사용할 수 있고 뒤에 2개 이상의 컬럼 이름이 나오면 모든 컬럼의 값이 같을 때 제거됩니다.
2개 이상의 컬럼 이름이 나오는 경우는 대부분 window 함수로 해결

usertbl 테이블에서 addr 의 중복을 제거하고 조회
	select distinct addr
	from usertbl;

10)TOP-N
=>일정한 개수 만큼 추출
=>limit 시작위치 개수
시작위치는 0부터 시작

usertbl 테이블에서 처음 5개의 데이터 가져오기
	select *
	from usertbl
	limit 0, 5;

usertbl 테이블에서 다음 5개의 데이터 가져오기
	select *
	from usertbl
	limit 5, 5;

11)그룹화
=>group by: 그룹 화 할 연산식이나 컬럼 이름 나열
=>having: group by 이후의 조건
=>집계 함수: group by 다음에 사용
having 절 과 select 절에서만 사용 가능
	sum()
	avg()
	min()
	max()
	count()
	stddev()
	var_samp()
컬럼이나 표현식을 매개변수로 사용하는데 count 의 경우는 *을 사용하는 것이 가능
null 인 값이 있으면 제외하고 집계를 수행

=>주의 사항: group by를 사용하게 되면 select 절에서 group by 에 사용한 컬럼을 제외한 컬럼은 단독으로 출력 불가능, 집계 함수 와 같이 사용하는 것은 가능


=>buytbl 테이블의 amount 평균 조회
select avg(amount)
from buytbl;

=>buytbl 테이블의 데이터 개수 조회(컬럼 이름을 사용하면 컬럼의 값이 null 이 아닌 데이터의 개수를 조회하지만 *을 사용하면 모든 컬럼의 값 중에서 하나라도 null 이 아닌 데이터의 개수를 조회)
select count(*)
from buytbl;

=>buytbl 테이블에서 userid 별 평균 amount 조회
select userid, avg(amount)
from buytbl
group by userid;

select 절에서 집계 함수를 사용할 때 다른 컬럼 과 같이 출력할려면 group by에서 그룹화를 해야 합니다.
그룹화를 하지 않고 집계 함수와 다른 컬럼을 함께 조회하면 mysql 은 첫번째 데이터만 조회가 됩니다.

=>where 는 group by 보다 먼저 수행되기 때문에 집계 함수를 사용할 수 없기 때문에 집계 함수를 이용한 조건을 작성할 때는 having 을 이용해야 합니다.

=>buytbl 테이블에서 3번 이상 등장하는 userid를 조회
select userid
from buytbl
group by userid
having count(*) >= 3;

=>where 절에 작성해도 되는 조건을 having 에 작성하는 것은 별로 바람직하지 않습니다.

=>distinct 대신에 group by 사용 가능
select distinct userid
from buytbl;

select userid
from buytbl
group by userid;

8.함수
=>매개변수를 받아서 결과를 리턴해주는 코드의 모임
=>개발자 입장에서는 데이터베이스 함수를 사용하지 않고 데이터를 애플리케이션이 가져온 다음 애플리케이션의 코드를 처리하는 경우도 많습니다.
1)문자열 함수
=>upper, lower
=>ltrim, rtrim, trim
=>substring
=>concat

2)숫자 함수

3)현재 날짜  및 시간 함수
current_date(), curdate()
current_time(), curtime()
now(), localtime(), localtimestamp()
current_timestamp()

4)윈도우 함수

5)순위 함수

6)분석 함수

7)피봇 함수

=>데이터 분석을 위해서 데이터베이스를 공부하는 거라면 윈도우 함수 나 분석 함수 그리고 피봇 함수를 학습하고 타블로 나 Microsoft Power BI 등 을 이용하면 됩니다.

9.DML(데이터 조작 언어)
1)데이터 삽입
insert into 테이블이름(컬럼 이름 나열) values(값을 나열);
=>컬럼 이름 나열하는 부분을 생략하면 테이블을 만들 때 사용한 컬럼 이름 순서대로 모든 값을 전부 나열해야 합니다.
=>컬럼 중에 auto_increment 컬럼의 경우는 값을 생략하는 것이 가능
=>컬럼 이름을 나열할 때 컬럼 이름이 생략되면 default 설정이 있으면 그 값이 대입되고 그렇지 않으면 null 이 설정됩니다.
=>null을 직접 설정하고자 하는 경우에는 null 이라고 입력해도 되고 '' 으로 입력해도 됩니다.
=>default 값을 설정할 때 도 default 라고 직접 입력해도 됩니다.

=>usertbl 테이블에 
userid 가 kjn 
name은 제니 
birthyear 의 값은 1996 
addr 은 서울
mobile은 01012341234
mdate 는 1996년 1월 16일
인 데이터를 삽입

insert into usertbl(userid, name, birthyear, addr, mobile, mdate)
values('kjn', '제니', 1996, '서울', '01012341234', str_to_date('1996-1-16', '%Y-%m-%d'));

2)데이터 수정
update 테이블이름
set 컬럼이름 = 수정할 값, ...
[where 조건];
=>where 절이 생략되면 테이블의 모든 데이터가 수정

=>usertbl 테이블에서 userid 가 kjn 인 데이터의 name을 김제니로 수정
update usertbl
set name='김제니'
where userid = 'kjn';

3)데이터 삭제
delete from 테이블이름
[where 조건];

=>조건이 없으면 테이블의 모든 데이터가 삭제됨
=>usertbl 테이블에서 userid 가 kjn 인 데이터를 삭제
delete from usertbl
where userid='kjn';

10.Join
=>하나의 이상의 테이블을 연결해서 하나의 집합으로 만드는 작업
1)Cross Join
=>Cartesian Product 라고도 함
=>2개의 테이블의 모든 조합을 만들어 내는 것
=>join 조건 없이 from 절에 2개의 테이블 이름을 나열한 경우

select *
from usertbl, buytbl;

select *
from usertbl cross join buytbl;

2)Inner Join
=>양쪽 테이블에 모두 존재하는 데이터를 가지고 JOIN을 수행
=>EQUI JOIN 이라고도 합니다.

select 출력할 열 목록
from 첫번째테이블, 두번째테이블
where 첫번째테이블.열이름 = 두번째테이블.열이름;

=>양쪽 테이블의 열이름이 동일하다면 테이블이름은 반드시 적어야 하고 그렇지 않다면 테이블이름은 생략 가능

select 출력할 열 목록
from 첫번째테이블 inner join 두번째테이블
on 첫번째테이블.열이름 = 두번째테이블.열이름;

=>양쪽 테이블의 열 이름이 동일하다면 natural join 가능
select 출력할 열 목록
from 첫번째테이블 natural join 두번째테이블;

이 경우는 중복된 열이 한 번만 출력됨


=>usertbl 테이블 과 buytbl 테이블은 userid 라는 컬럼이 존재합니다.
이 컬럼을 가지고 join을 수행

select *
from usertbl u, buytbl b
where u.userid = b.userid;

select *
from usertbl u inner join buytbl b
on u.userid = b.userid;

3)non equi join
=>조인 조건을 작성할 때 = 대신에 다른 연산자를 사용하는 것

emp 테이블
empno salary 컬럼이 존재

salgrade 테이블
grade losal hisal 컬럼이 존재

select empno, grade
from emp, salgrade
where salary between losal and hisal;

4)outer join
=>한쪽 테이블에만 존재하는 데이터도 join에 참여
select 컬럼 이름 나열
from 테이블 이름1, 테이블이름2
where 테이블이름1.컬럼이름(+) = 테이블이름2.컬럼이름(+);

+ 는 둘 중 하나에만 추가 가능

select 컬럼 이름 나열
from 테이블 이름1 [left | right | full] outer join 테이블이름2
on 조인 조건;

select *
from usertbl u left outer join buytbl b
on u.userid = b.userid;

5)self join
=>자기 자신 과 join
=>하나의 테이블에 동일한 의미를 갖는 컬럼이 2개 이상 존재할 때 가능
사원번호 -> 관리자 사원번호
SNS의 회원 테이블의 경우에는 자신의 아이디 와 친구 아이디

=>동일한 테이블 구조를 가지고 join을 수행하기 때문에 반드시 테이블 이름을 다른 이름으로 변경해서 사용해야 합니다.

=>emp 테이블 구조
empno(사원번호) ename(사원이름) manager(관리자 사원번호)


ename 이 scott 인 사원의 관리자의 ename을 조회

select e1.ename, e2.ename
from emp e1, emp e2
where upper(e1.ename) = 'SCOTT' and e1.manager = e2.empno;

6)join 사용 시 주의 사항
=>join은 2개 테이블의 조합이기 때문에 많은 양의 메모리를 사용합니다.
=>cross join은 특별한 경우가 아니면 피해야 합니다.
=>sub query로 해결할 수 있는 부분은 sub query로 해결을 해야 합니다.
sub query로 해결할 수 있는 경우는 조회하는 컬럼이 하나의 테이블에 전부 존재하는 경우

7)set 연산
=>동일한 구조(컬럼의 개수가 같아야 하고 컬럼의 자료형이 일치)를 갖는 테이블 끼리의 연산

=>형식
select 구문
set연산
select 구문
[order by 구문];

=>연산의 종류를 union(합집합), union all(합집합인데 동일한 데이터 여러 번 출력), intersect(교집합), except(차집합, Oracle은 minus)

11.TCL(Transaction Control Language)
=>Transaction: 한 번에 이루어져야 하는 작업의 논리적 단위
=>Transaction은 데이터베이스에서는 DML 과 연관이 있음

1)명령어
commit: 작업 완료(복사본에 수행한 작업을 원본에 반영), 트랜잭션 소멸

rollback [to savepoint 이름]: 작업 철회, savepoint 이름이 없으면 트랜잭션 소멸되지만 savepoint 이름이 있으면 트랜잭션은 savepoint 이름을 만든 곳으로 이동

savepoint 이름: rollback 지점을 생성

2)MySQL 의 엔진
=>Inno DB: 트랜잭션 지원, 조회 속도가 느림

=>MyISAM: 트랜잭션 지원 안함, 조회 속도가 빠름

3)트랜잭션이 생성되는 시점
=>트랜잭션이 없는 상태에서 DML(Insert, Delete, Update) 문장을 수행하면 트랜잭션이 생성됨

4)Auto Commit - 자동으로 commit 되고 트랜잭션이 소멸되는 경우
=>명시적인 commit
=>DDL 이나 DCL 문장의 수행 성공
=>접속 프로그램의 정상 종료
=>Java 의 JDBC 는 기본적으로 Auto Commit
Spring 은 기본적으로 Manual Commit

5)Auto Rollback - 자동으로 rollback 되고 트랜잭션이 소멸되는 경우
=>명시적인 rollback
=>접속 프로그램의 비정상적인 종료

6)savepoint를 만드는 경우
=>많은 양의 데이터베이스에 짧은 시간을 주기로 트랜잭션이 수행되는 경우

7)MVC 패턴의 프로그래밍에서 commit 이나 rollback 하는 지점
=>Controller 나 Service 계층

12.DDL(Data Definition Language - 데이터 정의 언어)
1)테이블 생성
create table [if not exists] 테이블이름(
	컬럼이름 자료형  컬럼 레벨 제약조건,
	컬럼이름 자료형  컬럼 레벨 제약조건,
	...
	테이블 제약 조건)ENGINE=엔진이름;

2)자료형
숫자 자료형: INT, FLOAT, DOUBLE, DECIMAL

문자 자료형: CHAR(바이트수), VARCHAR(바이트수), TEXT(문자열 - 인덱스 설정이 안됨), BLOB(바이트 배열 - 파일의 내용)

UTF-8에서는 한글 1글자가 3byte
CHAR 는 한 번 크기를 정하면 크기가 변경되지 않음
글자 수가 크기보다 작더라도 크기가 그대로
CHAR를 사용할 때는 뒤쪽 공백에 주의해야 합니다.

VARCHAR는 한 번 크기를 정한 후 데이터가 크기보다 작으면 남는 공간을 반납합니다.
VARCHAR는 데이터를 변경할 때 크기가 변경되기 때문에 ROW MIGRATION 발생 가능성이 있습니다.

날짜 자료형: DATE, DATETIME, TIMESTAMP, TIME, YEAR
목적이 주로 출력하는 것이라면 날짜 자료형 보다는 문자열로 설정하는 것이 나을 수 있고 연산을 자주 하는 경우는 날짜 자료형을 유지하는 것이 좋습니다.

BOOL: TRUE 또는 FALSE

XML 이나 JSON

GEOMETRY: 공간 정보

3)제약조건
=>종류
컬럼 레벨 과 테이블 레벨로 나누기도 하고 기능에 따라 나누기도 함

=>NOT NULL: NULL 일 수 없다.
NOT NULL 데이터 와 NOT NULL 이 아닌 데이터는 1바이트 크기 차이가 남
데이터베이스에서는 NULL 인 데이터를 만들 때 NULL을 저장하는 것이 아닙니다.
NULL을 저장할 수 있는 경우에는 1byte 를 할당해서 NULL 여부를 표시합니다.

=>UNIQUE: 중복 될 수 없다
NULL은 제외
자동을 인덱스를 생성

=>PRIMARY KEY: 테이블 내의 유일한 식별자
NOT NULL 이고 UNIQUE
테이블에서 한 번 만 설정 가능
여러 개의 컬럼으로 PRIMARY KEY를 만들 수 있음
여러 개의 컬럼으로 PRIMARY KEY를 구성할 때는 테이블 레벨에서 설정

=>check: 데이터의 범위나 값을 한정

=>FOREIGN KEY: 다른 테이블의 데이터를 참조하기 위한 설정
이 키는 다른 테이블에서는 PRIMARY KEY 나 UNIQUE 이어야 함
옵션 과 함께 설정 가능
 ON DELETE CASCADE
 ON DELETE SET NULL
 ON UPDATE CASCADE

옵션이 없으면 외래키로 설정된 테이블에서 외래키로 설정 된 값은 지우거나 수정할 수 없음
외래키로 지정된 테이블은 삭제가 안됨
외래키를 가지고 있는 테이블이 먼저 삭제되어야 함

=>default: 기본값 설정

=>auto_increament: 일련번호, 1번만 설정 가능







