박문석
01037901997
ggangpae1@gmail.com
ggangpae1.tistory.com - 수업 내용

1. 수업 내용
node.js
react.js, reactnative.js(Android Studio, XCode)
solidity

2.선수 지식
=>javascript(ECMA 2015), typescript
=>C++ 알면 좋음 - 몰라도 크게 관계 없음
=>MySQL(Oracle), MongoDB

3.코드 에러 나 질문
=>구글 원격 데스크 탑 이나 Team Viewer 로 원격 코드 보내주시면 제가 접속해서 해결을 해보도록 하겠습니다.

4.node
1)node
=>자바스크립트 문법을 이용해서 서버를 구현하는 프레임워크
=>V8 자바스크립트 엔진을 사용해서 애플리케이션을 개발할 수 있는 자바스크립트 환경

2)장점
=>접근이 쉬움 - 러닝 커브가 짧음
=>비동기 방식으로 동작하기 때문에 시스템 리소스 사용량이 적음
=>다양한 플러그 인이 제공

3)단점
=>Native 언어로 개발된 서버 환경보다는 속도가 느릴 수 있음

4)용도
=>짧은 메시지를 여러 클라이언트에게 전송하는 시스템 개발에 적합
=>대규모 연산 처리를 하는 부분은 부적합 - 분산 처리를 이용해서 많이 해결

5)노드의 다른 용도
=>다른 자바스크립트 엔진의 기반으로 사용되기 시작
	웹 클라이언트 프레임워크: angular, react, vue, meteor 등
	모바일 애플리케이션 프레임워크: react-native
	테스크 탑 애플리케이션 프레임워크: electron
=>다른 프로그래밍 언어에서도 노드 기반의 npm 을 사용하기 시작

2.node 개발 환경
1)node 번역기 - 소스 코드를 번역해서 실행 가능한 코드로 만들어주는 프로그램
=>windows: https://nodejs.org 에서 다운로드
=>mac: 터미널에서 brew install node
=>확인은 터미널에서 node 라고 입력했을 때 프롬프트가 변경되는지 확인

2)IDE 설치
=>node는 터미널에서 node 명령을 입력하면 터미널에서 프로그래밍 가능: 문법 학습 정도에서만 사용, 실제 애플리케이션 개발에는 부적합
=>최근에 많이 사용하는 IDE는 VSCode 

3.node 프로젝트 생성
1)디렉토리를 생성

2)디렉토리 안으로 프롬프트를 옮겨서 npm init 명령을 수행
=>package.json 파일이 생성되는지 확인

=>npm: 패키지 관리자
=>package.json: 노드 프로젝트 설정 파일

4.코드 작성 및 실행
1)코드 작성
=>확장자는 js

2)실행
=>node 파일명 - 문법 공부
=>npm start : entry point에 해당하는 파일 실행 - 애플리케이션 실행

3)프로젝트에 index.js 파일을 만들고 코드를 작성
//터미널에 텍스트 출력 - 자바스크립트는 ' 와 " 구분하지 않음
//; 은 한 줄에 2개 명령어 이상있을 때 구분 기호
//인터프리터 언어이므로 줄 단위을 하기 때문에
//줄 구분 기호가 없음
console.log('Hello Node');

4)실행
node index.js

5.모듈 프로그래밍
=>모듈: 파일의 개념
1)var.js 파일을 만들고 작성
const odd = "홀수";
const even = "짝수";

module.exports = {
    odd, even
};

2)var.js 파일의 내용을 가져다 사용할 import.js 파일을 만들고 작성
const {odd, even} = require('./var');

console.log(odd)
console.log(even)

3)실행
node import.js

6.node 내장 모듈
1)global 모듈
=>노드의 전역 객체
=>다른 모듈에 속하지 않은 함수 나 속성은 전부 global 모듈의 것
=>프로젝트 내의 모든 모듈이 데이터를 공유하기 위한 목적으로 사용
사용을 자제하는 것이 좋습니다.

2)console
=>자바스크립트의 콘솔은 브라우저 내의 검사 창을 의미하는 것이고 node 에서의 콘솔은 터미널입니다.
=>함수
log(메시지): 메시지를 터미널에 출력

error(메시지): 에러를 출력

trace(메시지): 호출 스택 로깅, 스택은 호출한 순서대로 저장을 해서 나중에 호출한 것 부터 꺼낼 수 있도록 만든 자료구조

table(배열): 배열 형태로 출력

dir(객체, 옵션): 로깅 할 때의 옵션 설정

time 과 timeEnd: 동일한 메시지를 입력해서 첫번째 메시지에서 두번째 메시지까지 걸린 시간을 측정하는데 메시지가 같아야 합니다.

=>logging.js 파일을 만들고 작성
console.log("메시지");
//중간 결과를 콘솔에서 확인하고자 할 때 주로 이용

//걸린 시간 측정
console.time("시간측정")

for(let i=0; i<1000000; i=i+1){}

//시간 측정 후 걸린 시간을 콘솔에 출력
console.timeEnd("시간측정")


3)경로 관련 속성
__filename: 파일 경로
__dirname: 디렉토리 경로

4)module.exports
=>외부 모듈을 가져와서 사용하기 위한 속성으로 다른 모듈에서 사용하고자 하는 내용이 있을 때 module.exports = {속성 이나 함수명을 나열}

5)require
=>모듈을 추출하는 함수
=>다른 모듈의 내용을 메모리에 로드해서 사용할 수 있도록 해주는 함수
변수명 = require("모듈이름");
=>모듈 이름을 기재할 때 일반적으로 확장자는 작성하지 않습니다.

6)process
=>현재 실행 중인 노드 프로세스에 대한 정보를 저장한 객체
=>process.nextTick(콜백함수): 다른 함수보다 우선해서 처리
Promise.resolve().then()으로 작성 가능 

//setInterval 함수는 함수 와 시간을 등록해서
//등록한 시간 단위로 함수를 수행해주는 타이머를 생성해주는 함수

function func1(){
    console.log("함수1");
}
//func1 은 3초가 지날 때 마다 호출됩니다.
//이런 함수를 콜백 함수라고 합니다.
setInterval(func1, 3000);

let func2 = function(){
    console.log("함수2");
}
//func1 은 3초가 지날 때 마다 호출됩니다.
//이런 함수를 콜백 함수라고 합니다.
setInterval(func2, 3000);

//함수 이름을 만들지 않고 코드를 직접 입력
//코드를 재사용하지 않을 거라면 이름을 만들지 않는 것을 권장
setInterval(function(){
    console.log("함수3");
}, 3000);

//화살표 함수(arrow function)를 이용한 콜백 작성
setInterval(() => {
    console.log("함수4");
}, 3000);

console.log("콜백이 아닌 내용1")

//즉시 실행 - 다른 일이 없다면 즉시 실행
setImmediate(()=>{
    console.log("즉시 실행");
})

console.log("콜백이 아닌 내용2")

//다른 콜백함수보다 먼저 수행
process.nextTick(()=>{
    console.log("다른 것 들 보다 먼저 1")
})

Promise.resolve().then(()=>{
    console.log("다른 것 들 보다 먼저 2")
})


7)os(운영체제 모듈)
=>운영체제 관련된 속성 과 함수를 소유한 모듈
=>최근에는 이 모듈은 잘 사용하지 않습니다.
예전에는 서버를 직접 소유한 형태의 프로그래밍 방식이 많음
서버의 운영체제가 변경이 되기도 하고 파일 시스템이 변경되기도 했기 때문에 운영체제에 대한 정보를 아는 것이 중요했습니다.
=>최근에는 클라우드 기반에서 서버를 운영하는 경우가 많기 때문에 개발자는 운영체제를 신경 쓸 필요가 없거나 클라우드 환경에서는 거의 대부분 리눅스만 사용하기 때문에 운영체제에 대한 정보를 직접 추출해야 하는 경우는 백앤드 프로그래밍에서는 거의 없습니다.
Front End에서는 아직도 중요한 문제가 될 수 있습니다.

8)path(경로) 
=>디렉토리 와 파일 경로를 쉽게 조작하도록 도와주는 모듈
=>sep: 경로의 구분자 - 구분자를 직접 입력해야 하는 상황이 오면 되도록이면 이 속성을 사용하는 것이 좋습니다.
=>join(경로를 나열): 나열한 경로를 묶어서 하나의 경로로 만들어 줍니다.
프로그래밍에서는 기준이 되는 경로를 설정하고 이 경로를 바탕으로 하위 경로를 만드는 형태를 많이 사용하기 때문에 중요

기준이 되는 경로는 하드코딩을 하지 않고 대부분 설정 파일이나 데이터베이스에 작성을 해두고 불러들이는 형태로 만들어야 합니다.

=>path.js 파일을 생성하고 작성한 후 실행
//path 모듈을 사용할 준비
const path = require('path');

console.log('경로 부분자:', path.sep);

const basepath = "c:\\adam"

console.log(path.join(basepath, '\adam.png'));

9)url 
=>url 관련된 모듈
=>parse 함수: url을 분해해주는 함수
=>format 함수: 분해된 url을 하나로 합쳐주는 함수

10)searchParams
=>queryString을 처리하기 위한 모듈로 url 모듈 안에 searchParams 속성에 존재
=>getAll 하게 되면 모든 값들을 가져옴

=>url.js 파일을 만들어서 작성
const url = require('url')
//url{URL:URL 관련된 객체, 다른애....}에서 특정 부분만 추출
const {URL} = url
const querystring = require('querystring')


//URL 분해
const parsedURL = url.parse(
    'https://cyberadam.com/item/list?page=1&size=15')
console.log(parsedURL)

//URL을 생성
const myURL = new URL(
    'https://cyberadam.com/item/list?page=1&size=15');

//파라미터 읽어오기
console.log(myURL.searchParams)
console.log(myURL.searchParams.get('page'))
//파라미터 부분 추출 - API는 deprecated(사용을 권장하지 않음)
console.log(querystring.stringify(
    querystring.parse(parsedURL.query)));


11)crypto 모듈
=>암호화 모듈
=>단방향 암호화
암호화 한 후 원래 평문으로 복호화를 하지 못하고 평문 과 암호화 된 문장의 동일성 여부만 판단할 수 있는 암호화

해시를 가장 많이 사용하는데 해시는 문자열을 고정된 길이의 다른 문자열로 변경하는 것

md5, sha1, sha256, sha384, sha512 등의 알고리즘이 사용됨

현재 인증서에서는 sha1 이 많이 사용됨

md5 와 sha1 은 취약점이 발견되서 최근에는 데이터 암호화에는 sha512 를 사용하는 것을 권장

sha512 가 취약해지면 sha3 이상을 사용하기를 권유

이 방식은 주로 비밀번호 저장에 사용합니다.

createHash(알고리즘): 단방향 암호화를 위한 알고리즘 객체를 생성
알고리즘 객체를 생성한 후 update(암호화 할 문장)을 호출하면 암호화 할 문자열을 설정
digest 함수를 호출해서 인코딩 할 알고리즘을 설정하면 암호화된 문자열을 반환합니다.

=>encoding.js 파일을 생성하고 작성 후 실행: 동일한 문장을 암호화 하면 결과가 같아야 함
const crypto = require('crypto');

const password1 = "adam";
const password2 = "adam";
const password3 = "adan";
//단방향 암호화 - pbkdt2, bcrypt, scrypt 로 검색
const p1 = crypto.createHash('sha512')
    .update(password1)
    .digest('base64');

const p2 = crypto.createHash('sha512')
    .update(password2)
    .digest('base64');

const p3 = crypto.createHash('sha512')
    .update(password3)
    .digest('base64');

console.log(p1)
console.log(p2)
console.log(p3)

=>양방향 암호화: 대칭형 암호화, cipher
암호화를 하고 복호화 하는 것이 가능
키가 필요하고 암호화 할 때 와 복호화 할 때 키가 같아야 합니다.

암호화 객체 생성: crypto.createCipheriv(알고리즘, 키, 초기화 벡터)
  알고리즘은  aes-256-cbc를 사용
  키는 32바이트로 고정
  초기화 벡터는 16바이트로 고정
  암호화 된 문장을 만들 때 키 와 초기화 벡터를 이용해서 두 번 연산을 수행합니다.
  동일한 데이터를 가지고 알고리즘 과 키를 같게하더라도 초기화 벡터가 다르면 다르게 암호화

  되도록이면 키 와 초기화 벡터를 고정값을 이용하지 않고 랜덤한 값으로 생성해서 기록해두는 것이 더 좋습니다.

암호화된 객체를 이용한 암호화: cipher.update(암호화할 문자열, 인코딩, 출력 인코딩)
인코딩은 거의 무조건 utf8 이고 출력 인코딩은 base64를 이용

cipher.final(출력 인코딩)을 호출해서 나온 결과를 update의 결과와 합치면 암호화 종료

복호화 객체 생성: crypto.createDecipheriv(알고리즘, 키, 초기화 벡터)
나머지 작업은 동일

=>codec.js 파일을 만들고 작성한 후 실행
//대칭형 암호화
const crypto = require('crypto');

//암호화 할 문장
const plaintext = '사이버가수 아담';

//암호화에 사용할 3가지 정보
const algorithm = 'aes-256-cbc'; //알고리즘
const key = 'abcdefghijklmnopqrstuvwxyz123456'; //key
const iv = '1234567890123456'; //iv - 초기화 벡터

const iv1 = '1234567890123457';

//cipher 생성
let cipher = crypto.createCipheriv(algorithm, key, iv);
//암호화
let result = cipher.update(plaintext, 'utf8', 'base64');
result += cipher.final('base64')
console.log(result);

cipher = crypto.createCipheriv(algorithm, key, iv1);
//암호화
result = cipher.update(plaintext, 'utf8', 'base64');
result += cipher.final('base64');
console.log(result);

//복호화 - 암호화의 반대
cipher = crypto.createDecipheriv(algorithm, key, iv1);
result = cipher.update(result, 'base64', 'utf8');
result += cipher.final('utf8');
console.log(result);

12)worker_threads 모듈




























