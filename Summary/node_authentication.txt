**MySQL 과 ORM 인 Sequelize 를 이용한 Authentication
1.프로젝트 생성
1)패키지 설치
=>패키지: npm install express morgan dotenv compression file-stream-rotator multer cookie-parser express-session express-mysql-session mysql2 sequelize sequelize-cli nunjucks(템플릿 엔진 - 서버의 데이터를 뷰에서 바로 출력하기 위한 라이브러리)

nodemon 은 개발용으로 설치: npm install --save-dev nodemon

=>전역으로 설치할 때는 -g 나 global을 붙이는데 이 경우 MAC에서는 앞에 sudo 를 추가해서 관리자 명령으로 수행해야 하고 이렇게 설치하는 의도는 프로젝트에서도 사용하지만 콘솔명령으로도 사용할 목적입니다.

2)package.json 수정
 "scripts": {
    "start":"nodemon app",
    "test": "jest"
  },

3)필요한 디렉토리 생성 - 디렉토리 이름은 다른 이름을 사용해도 됩니다.
views: 화면에 보여지는 뷰들이 저장될 디렉토리
routes: 라우팅 관련 파일이 저장될 디렉토리
public: 정적 파일(js, css 등)이 저장될 디렉토리

4)프로젝트에 상수를 저장할 .env 파일을 만들고 작성
PORT=9000
COOKIE_SECRET=authentication

HOST='localhost'
MYSQLPORT=3306
USERID='user00'
PASSWORD='user00'
DATABASE='node'

5)Entry Point 의 역할을 수행할 App.js 파일을 만들고 기본 코드를 작성
//웹서버 모듈 추출
const express = require('express');

//.env 파일의 내용을 읽어서 process.env 를 통해 접근하도록 설정
const dotenv = require('dotenv');
dotenv.config();

//서버 설정
const app = express();
app.set('port', process.env.PORT);

//파일의 기본 경로 와 읽고 쓰기 위한 모듈을 추출
const fs = require('fs');
const path = require('path');

//static 파일의 경로 설정
app.use(express.static(path.join(__dirname, 'public')));

//view template 설정
const nunjucks = require('nunjucks');
app.set('view engine', 'html'); 
nunjucks.configure('views', {
    express:app,
    watch: true, 
});

//로그 기록하기 위한 패키지 추출
const morgan = require('morgan');
//로그를 파일에 출력하기 위한 패키지 추출
const FileStreamRotator = require('file-stream-rotator');

//로그를 기록하기 위한 디렉토리 경로를 생성
const logDirectory = path.join(__dirname, 'log');

// 로그 디렉토리 생성
fs.existsSync(logDirectory) || fs.mkdirSync(logDirectory);

// 로그 파일 옵션 설정 - 매일 access-YYYYMMDD.log 파일로 기록 
const accessLogStream = FileStreamRotator.getStream({
  date_format: 'YYYYMMDD',
  filename: path.join(logDirectory, 'access-%DATE%.log'),
  frequency: 'daily',
  verbose: false
});

// 로그 설정
app.use(morgan('combined', {stream: accessLogStream}));

//출력하는 내용을 압축해서 전송
const compression = require('compression');
app.use(compression());

//post 방식의 파라미터 읽기
var bodyParser = require('body-parser');
app.use(bodyParser.json());       // to support JSON-encoded bodies
app.use(bodyParser.urlencoded({     // to support URL-encoded bodies
	extended: true
})); 
//이 설정때문에 post 방식의 파라미터를 req.body.이름 으로 읽을 수 있습니다.

//쿠키(클라이언트의 데이터를 저장해두고 다음에 사용하기 위해서
//클라이언트에 저장하고 서버에 전송한 후 사용하기 위한 객체) 설정
//클라이언트에 보관할 데이터가 없다면 생략 가능
const cookieParser = require('cookie-parser');
app.use(cookieParser(process. env.COOKIE_SECRET));

//세션(클라이언트의 데이터를 서버에 저장해두고 사용)
//세션은 쿠키와 같이 만들어집니다.
//세션을 쿠키 세션이라고도 하며 접속한 브라우저 탭 당 1개씩 생성됨
//세션은 기본적으로 서버의 메모리에 생성되는데
//파일이나 데이터베이스에 저장이 가능합니다.
const session = require("express-session");

//데이터베이스 접속 정보
var options = {
    host :process.env.HOST,
	port : process.env.MYSQLPORT,
	user : process.env.USERID,
	password : process.env.PASSWORD,
	database : process.env.DATABASE
};

//세션을 MySQL에 저장하기 위한 패키지 추출
const MySQLStore = require('express-mysql-session')(session);

//세션을 MySQL 에 저장하기 위한 설정
app.use(
    session({
      secret: process.env.COOKIE_SECRET,
      resave: false,
      saveUninitialized: true,
      store : new MySQLStore(options)
    })
);

//세션을 설정하면 req.session.이름 으로 데이터를 저장하고 읽어 낼 수 있습니다.
//세션에 저장하면 브라우저 접속을 끝내거나 강제로 세션의 내용을 삭제하지 않으면
//계속 남아 있습니다.

//라우터 설정 - /로 시작하는 요청을 page.js 파일의 내용으로 처리
const pageRouter=require('./routes/page');
app.use ('/',pageRouter);



//에러가 발생한 경우 처리
app.use((req, res, next) => {
    const err = new Error(`${req.method} ${req.url} 라우터가 없습니다.`);
	err.status = 404;
	next(err);
});

//에러가 발생한 경우 처리
app.use((err, req, res, next) => {
    res.locals.message = err.message;
    res.locals.error = process.env.NODE_ENV !== 'production' ? err : {};
    res.status(err.status || 500);
    res.render('error');
});

//서버 실행
app.listen(app.get('port'), () => {
  console.log(app.get('port'), '번 포트에서 대기 중');
});


6)routes 디렉토리에 page.js 파일을 만들고 라우팅 코드를 작성
const express = require('express')

const router = express.Router();

//무조건 수행 - url을 설정하지 않아서 무조건 수행
//request 객체에 데이터 저장
router.use((req, res, next) =>{
    res.locals.user = null;
    res.locals.followerCount = 0;
    res.locals.followingCount = 0;
    res.locals.followerIdList = [];
    //다음에 처리할 것이 있으면 다음 처리로 이동해서 처리
    next();
});

//로그인에 성공했을 때 정보를 보여주기 위한 요청을 처리
router.get('/profile', (req, res) => {
    //첫번째 매개변수는 view 파일의 이름이고
    //두번째 매개변수는 view 파일에 넘어가는 데이터입니다.
    res.render('profile', {title:'내 정보 - NodeSNS'});
});

//메인화면에서 회원 가입 버튼을 눌렀을 때 처리
router.get('/join', (req, res) => {
    res.render('join', {title:'회원 가입 - NodeSNS'});
});

//시작 요청을 했을 때 처리 내용
router.get('/', (req, res, next) => {
    const twits = [];
    res.render('main', {
        title:'Node SNS',
        twits
    });
});

module.exports = router;

7)views 디렉토리에 공통된 레이아웃에 사용될 layout.html 파일을 생성하고 작성
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <!-- 서버가 넘겨준 title 이라는 데이터 출력-->
    <title>{{title}}</title>
    <!-- 모바일에서 보는 페이지를 만들 때 주로 설정-->
    <meta name="viewport" content="width=device-width, user-scalable=no">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <link rel="stylesheet" href="/main.css">
  </head>
  <body>
    <div class="container">
      <div class="profile-wrap">
        <div class="profile">
          {% if user and user.id %}
            <div class="user-name">{{'안녕하세요! ' + user.nick + '님'}}</div>
            <div class="half">
              <div>팔로잉</div>
              <div class="count following-count">{{followingCount}}</div>
            </div>
            <div class="half">
              <div>팔로워</div>
              <div class="count follower-count">{{followerCount}}</div>
            </div>
            <input id="my-id" type="hidden" value="{{user.id}}">
            <a id="my-profile" href="/profile" class="btn">내 프로필</a>
            <a id="logout" href="/auth/logout" class="btn">로그아웃</a>
          {% else %}
            <form id="login-form" action="/auth/login" method="post">
              <div class="input-group">
                <label for="email">이메일</label>
                <input id="email" type="email" name="email" required autofocus>
              </div>
              <div class="input-group">
                <label for="password">비밀번호</label>
                <input id="password" type="password" name="password" required>
              </div>
              <a id="join" href="/join" class="btn">회원가입</a>
              <button id="login" type="submit" class="btn">로그인</button>
              <a id="kakao" href="/auth/kakao" class="btn">카카오톡</a>
            </form>
          {% endif %}
          </div>

          <footer>
            Made by&nbsp;
            <a href="https://ggangpae1.tistory.com/" target="_blank">ADAM</a>
          </footer>
        </div>
        {% block content %}
        {% endblock %}
      </div>
      <!-- node 프로젝트에서 ajax를 사용할 때 많이 이용-->
      <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
      <script>
        //윈도우가 로딩 될 때 파라미터를 출력
        //로그인에 실패해서 이 페이지를 다시 로딩할 때 loginError 에 담긴 내용을
        //대화상자로 출력
        window.onload = () => {
          if (new URL(location.href).searchParams.get('loginError')) {
            alert(new URL(location.href).searchParams.get('loginError'));
          }
        };
      </script>
      {% block script %}
      {% endblock %}
    </body>
</html>


8)메인 화면을 위한 출력 파일을 작성 - views/main.html
{% extends 'layout.html' %}

{% block content %}
    <div class="timeline">
      {% if user %}
        <div>
          <form id="twit-form" action="/post" method="post" enctype="multipart/form-data">
            <div class="input-group">
              <textarea id="twit" name="content" maxlength="140"></textarea>
            </div>
            <div class="img-preview">
              <img id="img-preview" src="" style="display: none;" width="250" alt="미리보기">
              <input id="img-url" type="hidden" name="url">
            </div>
            <div>
                <label id="img-label" for="img">사진 업로드</label>
                <input id="img" type="file" accept="image/*">
                <button id="twit-btn" type="submit" class="btn">게시</button>
              </div>
            </form>
          </div>
        {% endif %}
  
        <div class="twits">
            {% for twit in twits %}
              <div class="twit">
                <input type="hidden" value="{{twit.User.id}}" class="twit-user-id">
                <input type="hidden" value="{{twit.id}}" class="twit-id">
                <div class="twit-author">{{twit.User.nick}}</div>
                {% if not followerIdList.includes(twit.User.id) and twit.User.id !== user.id %}
                  <button class="twit-follow">팔로우하기</button>
                {% endif %}
                <div class="twit-content">{{twit.content}}</div>
                {% if twit.img %}
                  <div class="twit-img"><img src="{{twit.img}}" alt="섬네일"></div>
                {% endif %}
              </div>
            {% endfor %}
          </div>
        </div>
    {% endblock %}
    
    {% block script %}
    <script>
      //이미지를 미리보기
      if (document.getElementById('img')) {
        document.getElementById('img').addEventListener('change', function(e) {
          const formData = new FormData();
          console.log(this, this.files);
          formData.append('img', this.files[0]);
          //폼의 이미지 데이터를 post 방식으로 전송
          axios.post('/post/img', formData)
            .then((res) => {
              document.getElementById('img-url').value = res.data.url;
              document.getElementById('img-preview').src = res.data.url;
              document.getElementById('img-preview').style.display = 'inline';
            })
            .catch((err) => {
              console.error(err);
            });
        });
      }
  
      //글을 보고 팔로우 버튼을 눌렀을 때 처리
      document.querySelectorAll('.twit-follow').forEach(function(tag) {
      tag.addEventListener('click', function() {
        const myId = document.querySelector('#my-id');
        if (myId) {
          const userId = tag.parentNode.querySelector('.twit-user-id').value;
          if (userId !== myId.value) {
            if (confirm('팔로잉하시겠습니까?')) {
              axios.post(`/user/${userId}/follow`)
                .then(() => {
                  location.reload();
                })
                .catch((err) => {
                  console.error(err);
                });
            }
          }
        }
      });
    });
  </script>
{% endblock %}
        
9)사용자의 팔로워 와 팔로잉 중인 목록 출력을 위한 파일을 생성하고 작성 - views/profile.html

{% extends 'layout.html' %}

{% block content %}
  <div class="timeline">
    <div class="followings half">
      <h2>팔로잉 목록</h2>
      {% if user.Followings %}
        {% for following in user.Followings %}
          <div>{{following.nick}}</div>
        {% endfor %}
      {% endif %}
    </div>
    <div class="followers half">
      <h2>팔로워 목록</h2>
      {% if user.Followers %}
        {% for follower in user.Followers %}
          <div>{{follower.nick}}</div>
        {% endfor %}
      {% endif %}
    </div>
  </div>
{% endblock %}

10)회원 가입을 위한 출력 파일을 생성 - views/join.html
{% extends 'layout.html' %}

{% block content %}
  <div class="timeline">
    <form id="join-form" action="/auth/join" method="post">
      <div class="input-group">
        <label for="join-email">이메일</label>
        <input id="join-email" type="email" name="email"></div>
      <div class="input-group">
        <label for="join-nick">닉네임</label>
        <input id="join-nick" type="text" name="nick"></div>
      <div class="input-group">
        <label for="join-password">비밀번호</label>
        <input id="join-password" type="password" name="password">
      </div>
      <button id="join-btn" type="submit" class="btn">회원가입</button>
    </form>
  </div>
{% endblock %}
{% block script %}
  <script>
    window.onload = () => {
      if (new URL(location.href).searchParams.get('error')) {
        alert('이미 존재하는 이메일입니다.');
      }
    };
  </script>
{% endblock %}

11)에러가 발생했을 때 출력할 파일을 생성 - views/error.html
{% extends 'layout.html' %}

{% block content %}
  <h1>{{message}}</h1>
  <h2>{{error.status}}</h2>
  <pre>{{error.stack}}</pre>
{% endblock %}

12)public 디렉토리에 main.css 파일을 만들고 작성
* { box-sizing: border-box; }
html, body { margin: 0; padding: 0; height: 100%; }
.btn {
  display: inline-block;
  padding: 0 5px;
  text-decoration: none;
  cursor: pointer;
  border-radius: 4px;
  background: white;
  border: 1px solid silver;
  color: crimson;
  height: 37px;
  line-height: 37px;
  vertical-align: top;
  font-size: 12px;
}
input[type='text'], input[type='email'], input[type='password'], textarea {
  border-radius: 4px;
  height: 37px;
  padding: 10px;
  border: 1px solid silver;
}
.container { width: 100%; height: 100%; }

@media screen and (min-width: 800px) {
  .container { width: 800px; margin: 0 auto; }
}
.input-group { margin-bottom: 15px; }
.input-group label { width: 25%; display: inline-block; }
.input-group input { width: 70%; }
.half { float: left; width: 50%; margin: 10px 0; }
#join { float: right; }
.profile-wrap {
  width: 100%;
  display: inline-block;
  vertical-align: top;
  margin: 10px 0;
}

@media screen and (min-width: 800px) {
    .profile-wrap { width: 290px; margin-bottom: 0; }
  }
  .profile {
    text-align: left;
    padding: 10px;
    margin-right: 10px;
    border-radius: 4px;
    border: 1px solid silver;
    background: lightcoral;
  }
  .user-name { font-weight: bold; font-size: 18px; }
  .count { font-weight: bold; color: crimson; font-size: 18px; }
  .timeline {
    margin-top: 10px;
    width: 100%;
    display: inline-block;
    border-radius: 4px;
    vertical-align: top;
  }
  
  @media screen and (min-width: 800px) { .timeline { width: 500px; } }
  #twit-form {
    border-bottom: 1px solid silver;
    padding: 10px;
    background: lightcoral;
    overflow: hidden;
  }
  #img-preview { max-width: 100%; }
  #img-label {
    float: left;
    cursor: pointer;
    border-radius: 4px;
    border: 1px solid crimson;
    padding: 0 10px;
    color: white;
    font-size: 12px;
    height: 37px;
    line-height: 37px;
  }

  #img { display: none; }
  #twit { width: 100%; min-height: 72px; }
  #twit-btn {
    float: right;
    color: white;
    background: crimson;
    border: none;
  }
  .twit {
    border: 1px solid silver;
    border-radius: 4px;
    padding: 10px;
    position: relative;
    margin-bottom: 10px;
  }

  .twit-author { display: inline-block; font-weight: bold; margin-right: 10px; }
  .twit-follow {
    padding: 1px 5px;
    background: #fff;
    border: 1px solid silver;
    border-radius: 5px;
    color: crimson;
    font-size: 12px;
    cursor: pointer;
  }
  .twit-img { text-align: center; }
  .twit-img img { max-width: 75%; }
  .error-message { color: red; font-weight: bold; }
  #search-form { text-align: right; }
  #join-form { padding: 10px; text-align: center; }
  #hashtag-form { text-align: right; }
  footer { text-align: center; }

2.데이터베이스 연동
1)테이블 
=>user 테이블 : 회원 정보 테이블
이메일
닉네임
비밀번호
로그인 방법: local 인지 kakao 로 로그인 한 것인지
카카오아이디
생성 시간
수정 시간
삭제 시간

=>post 테이블
게시글 내용
이미지 파일 경로

=>hashtag 테이블
태그 이름

=>관계
User 와 Post 는 1:N 관계 - User 의 기본키를 Post 에 외래키로 추가
Post 와 HashTag는 N:N 관계 - Post 의 기본키와 HashTag 의 기본키를 가진 별도의 테이블 생성
User 와 User 는 N:N 관계

2)sequelize를 사용하기 위해서 초기화: 4개의 디렉토리가 생성
npx sequelize init

3)회원 정보 테이블 과 연동할 user.js 파일을 models 디렉토리에 생성하고 작성
=>기존 테이블이 없을 때는 테이블을 만드는 역할도 수행
여기에 작성한 내용에 id 라는 컬럼이 자동으로 추가됩니다.
기존 테이블의 경우는 id 컬럼이 존재해야 합니다.

const Sequelize = require('sequelize')

module.exports = class User extends Sequelize.Model{
    static init(sequelize){
        return super.init({
            email:{
                type:Sequelize.STRING(40),
                allowNull:true,
                unique:true
            },
            nick:{
                type:Sequelize.STRING(15),
                allowNull:false
            },
            password:{
                type:Sequelize.STRING(100),
                allowNull:true
            },
            provider:{
                type:Sequelize.STRING(10),
                allowNull:false,
                defaultValue:'local'
            },
            snsId:{
                type:Sequelize.STRING(30),
                allowNull:true
            }
        },{
            sequelize,
            timestamps:true,
            underscored:false,
            modelName:'User',
            tableName:'users',
            paranoid:true,
            charset:'utf8',
            collate:'utf8_general_ci'
        })
    }

    static associate(db){
        db.User.hasMany(db.Post);
        db.User.belongsToMany(db.User,{
            foreignKey:'followingId',
            as:'Followers',
            through:'Follow'
        });
        db.User.belongsToMany(db.User,{
            foreignKey:'followerId',
            as:'Followings',
            through:'Follow'
        });

    }
}

4)Post 테이블 과 연동할 post.js 파일을 models 디렉토리에 생성하고 작성
const  Sequelize = require('sequelize')

module.exports = class Post extends Sequelize.Model{
    static init(sequelize){
        return super.init({
            content:{
                type:Sequelize.STRING(140),
                allowNull:false
            },
            img:{
                type:Sequelize.STRING(200),
                allowNull:true
            }
        },{
            sequelize,
            timestamps:true,
            underscored:false,
            modelName:'Post',
            tableName:'posts',
            paranoid:false,
            charset:'utf8mb4',
            collate:'utf8mb4_general_ci'
        })
    }

    static associate(db){
        db.Post.belongsTo(db.User);
        db.Post.belongsToMany(db.Hashtag, 
            {through:'PostHashTag'})
    }
}

5)해시 태그 정보를 저장할 hashtag.js 파일을 models 디렉토리에 생성하고 작성
const  Sequelize = require('sequelize')

module.exports = class Hashtag extends Sequelize.Model{
    static init(sequelize){
        return super.init({
            title:{
                type:Sequelize.STRING(15),
                allowNull:false,
                unique:true
            }
        },{
            sequelize,
            timestamps:true,
            underscored:false,
            modelName:'Hashtag',
            tableName:'hashtags',
            paranoid:false,
            charset:'utf8mb4',
            collate:'utf8mb4_general_ci'
        })
    }

    static associate(db){
        db.Hashtag.belongsToMany(db.Post, 
            {through:'PostHashtag'});
    }
}

6)models 디렉토리의 index.js 를 수정해서 만든 모델을 사용할 수 있도록 설정
const Sequelize = require('sequelize');
const env = process.env.NODE_ENV || 'development';
const config = require(__dirname + '/../config/config.json')[env];

const User = require('./user');
const Post = require('./post');
const Hashtag = require('./hashtag');

const db = {};

const sequelize = new Sequelize(config.database, config.username, config.password, config);

db.sequelize = sequelize;

db.User = User;
db.Post = Post;
db.Hashtag = Hashtag

User.init(sequelize);
Post.init(sequelize);
Hashtag.init(sequelize);

User.associate(db);
Post.associate(db);
Hashtag.associate(db);

module.exports = db;

7)config.js 파일에 접속하고자 하는 데이터베이스로 정보를 변경
{
  "development": {
    "username": "user00",
    "password": "user00",
    "database": "node",
    "host": "127.0.0.1",
    "dialect": "mysql"
  },
  "test": {
    "username": "user00",
    "password": "user00",
    "database": "node",
    "host": "127.0.0.1",
    "dialect": "mysql"
  },
  "production": {
    "username": "user00",
    "password": "user00",
    "database": "node",
    "host": "127.0.0.1",
    "dialect": "mysql"
  }
}

8)App.js 파일에 데이터 모델을 연결하는 코드를 추가
//require 에 디렉토리 이름을 입력하면 index.js를 가져오는 것
//const db = require('./models'); //db를 가져온 것이고
//models/index.js 파일에서 내보내는 것 중에서 sequelize를 가져옵니다.
const {sequelize} = require('./models');

//이 부분이 호출되면 테이블이 없으면 테이블을 생성하고 테이블이 있으면 연결
sequelize.sync({force:false})
.then(()=>{
    console.log('데이터베이스 연결 성공');
})
.catch((err) => {
    console.error(err);
})

9)데이터베이스가 없는 경우 수행
npx sequelize-cli db:create

10)서버 실행 - 테이블이 없으면 테이블이 생성
npm start

3.Passport 모듈
=>세션 과 쿠키 처리 같은 인증에 관련된 작업을 자동화해주는 모듈로 Social Login 과 OAuth 기능도 제공
=>https://www.passportjs.org 에서 도큐먼트 제공

4.로그인 구현
1)필요한 패키지 설치
npm install passport passport-local bcrypt

2)App.js 파일에 Passport 모듈을 사용하기 위한 설정 코드를 추가
const passport = require('passport');
const passportConfig = require('./passport');
passportConfig();
app.use(passport.initialize());
app.use(passport.session());

3)프로젝트에 인증과 관련된 파일들을 저장할 passport 디렉토리를 생성

4)passport 디렉토리에 Passport 설정을 위한 index.js 파일을 생성하고 작성
const passport = require('passport');

//로그인 관련 모듈 가져오기

//전략 모듈을 가져오기
const local = require('./localStrategy');

//테이블 가져오기
const User = require('../models/user')

module.exports = () => {
    //로그인 했을 때 정보 넘기기
    passport.serializeUser((user, done)=>{
        //유저 정보의 기본키 값을 넘겨주어야 합니다.
        done(null, user.id);
    });

    passport.deserializeUser((id, done) => {
        User.findOne({where:{id}})
        .then(user => done(null, user))
        .catch(err => done(err))
    })
    //로컬 로그인 함수를 호출
    local();
}

5)routes 디렉토리에 로그인 여부를 판단하기 위한 코드를 middleware.js 파일로 작성
exports.isLoggedIn = (req, res, next) => {
    if(req.isAuthenticated()){
        next();
    }else{
        res.status(403).send("로그인 필요");
    }
}

exports.isNotLoggedIn = (req,res, next) => {
    if(!req.isAuthenticated()){
        next();
    }else{
        const message = 
            encodeURIComponent("로그인 한 상태입니다.")
        res.redirect(`/?error=${message}`)
    }
}

6)routes 디렉토리의 page.js 파일에 로그인 필터를 적용
const express = require('express')

const router = express.Router();

const {isLoggedIn, isNotLoggedIn} = require('./middleware');


//무조건 수행
router.use((req, res, next) =>{
    res.locals.user = req.user;
    res.locals.followerCount = 0;
    res.locals.followingCount = 0;
    res.locals.followerIdList = [];
    //다음에 처리할 것이 있으면 다음 처리로 이동해서 처리
    next();
});

//프로필을 출력할 때 로그인 여부를 확인하고 수행
router.get('/profile', isLoggedIn, (req, res) => {
    //첫번째 매개변수는 view 파일의 이름이고
    //두번째 매개변수는 view 파일에 넘어가는 데이터입니다.
    res.render('profile', {title:'내 정보 - NodeSNS'});
});

//회원가입을 할 때는 로그인이 되지 않은 경우만 페이지 이동
router.get('/join', isNotLoggedIn, (req, res) => {
    res.render('join', {title:'회원 가입 - NodeSNS'});
});

router.get('/', (req, res, next) => {
    const twits = [];
    res.render('main', {
        title:'Node SNS',
        twits
    });
});

module.exports = router;

7)routes 디렉토리에 회원 가입, 로그인, 로그아웃 처리를 위한 auth.js 파일을 만들고 작성
const express = require('express');
const passport = require('passport');
const bcrypt = require('bcrypt');
const {isLoggedIn, isNotLoggedIn} = 
    require('./middleware');
const User = require('../models/user');

const router = express.Router();

//회원 가입 처리 - 로그인 안된 경우에만 처리
router.post('/join', isNotLoggedIn, 
    async(req, res, next) => {
       //파라미터 읽어오기
        const {email, nick, password} = req.body;
        try{
           //email 중복 검사
           const exUser = await User.findOne({where:{email}}); 
           //email 이 존재하면 error에 메시지를 전송  
           if(exUser){
            return res.redirect('/join?error=exist');
           }
           //비밀번호를 암호화
           const hash = await bcrypt.hash(password, 12);
           //데이터베이스에 저장
           await User.create({
            email,
            nick,
            password:hash
           });
           return res.redirect('/');          
        }catch(err){
            console.error(err);
            return next(err);
        }
})

router.post('/login', isNotLoggedIn, (req, res, next) => {
    //localStrategy 의 함수를 호출해서 로그인을 수행
    //authError 는 에러가 발생했을 때 에러 객체
    //user 는 로그인에 성공했을 때 유저 정보
    //info는 로그인에 실패했을 때 실패한 이유
    passport.authenticate('local', (authError, user, info)=>{
        //에러가 발생한 경우
        if(authError){
            console.error(authError);
            return next(authError);
        }
        //user 정보가 없으므로 로그인 실패한 경우	
        if(!user){
            return res.redirect(`/?loginError=${info.message}`);
        }
        //로그인에 성공한 경우
        return req.login(user, (loginError) =>{
            if(loginError){
                console.error(loginError);
                return next(loginError);
            }
            return res.redirect('/');
        });
    })(req, res, next); //미들웨어 내에서 호춣하는 미들웨어는 정보를 전달
})

//로그아웃 처리 - 로그인 되어 있을 때 만 수행
router.get('/logout', isLoggedIn, (req, res) => {
    req.logout(function(err){
        if(err){return next(err)}
        //로그아웃을 할 때는 세션을 소멸시켜야 합니다.
        req.session.destroy();
        res.redirect('/');
    })
})

module.exports = router;

8)passport 디렉토리에 localStrategy.js 파일을 생성하고 작성 - 자체 로그인 구현
const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy
const bcrypt = require('bcrypt');

const User = require('../models/user');

module.exports = () => {
    passport.use(new LocalStrategy({
        usernameField:'email',
        passwordField:'password'
    }, async(email, password, done)=>{
        try{
            //아이디만 확인
            const exUser = await User.findOne({where:{email}});
            if(exUser){
                //비밀번호 비교
                const result = 
                    await bcrypt.compare(password, exUser.password);
                if(result){
                    done(null, exUser);
                }else{
                    done(null, false, 
                        {message:'비밀번호가 잘못되었습니다.'});
                }
            }else{
                done(null, false, {message:'가입되지 않은 회원'});
            }
        }catch(err){
            console.error(err);
            done(err);
        }
    }))
}

9)App.js 파일에 로그인 관련 라우터(routes/auth.js)를 등록
const authRouter=require('./routes/auth');
app.use ('/auth',authRouter);

10)서버를 실행하고 브라우저에서 테스트
=>회원 가입을 테스트
auth.js 파일에서 url을 설정할 때 앞에 /앞에 .을 붙여서 /auth 라우터가 없다는 에러가 발생해서 수정

회원 가입을 처리하는 부분에서 파라미터를 읽어오는 부분을 작성하지 않아서 email 이 defined 되었다고 에러가 발생해서 파라미터를 읽어오는 부분을 추가해서 해결

=>로그인 테스트
정상적으로 입력하고 확인하고 비밀번호를 잘못 입력했을 때 와 없는 이메일을 입력했을 때 도 확인

5.카카오 로그인
1)패키지 설치: passport-kakao

2)passport 디렉토리의 index.js 파일에 카카오 로그인 전략을 등록
const passport = require('passport');

//로그인 관련 모듈 가져오기

//전략 모듈을 가져오기
const local = require('./localStrategy');
const kakao = require('./kakaoStrategy');

//테이블 가져오기
const User = require('../models/user')

module.exports = () => {
    //로그인 했을 때 정보 넘기기
    passport.serializeUser((user, done)=>{
        //유저 정보의 기본키 값을 넘겨주어야 합니다.
        done(null, user.id);
    });

    passport.deserializeUser((id, done) => {
        User.findOne({where:{id}})
        .then(user => done(null, user))
        .catch(err => done(err))
    })
    //로컬 로그인 함수를 호출
    local();
    //카카오 로그인 함수를 호출
    kakao();
}

3)passport 디렉토리에 카카오 로그인 전략을 위한 kakaoStrategy.js 파일을 생성하고 작성
const passport = require('passport');
const KakaoStrategy = require('passport-kakao').Strategy;
const User = require('../models/user');
//const{User} = require('../models');

module.exports = () => {
    passport.use(new KakaoStrategy({
        clientID:process.env.KAKAO_ID,
        callbackURL: '/auth/kakao/callback'
    },async(accessToken, refreshToken, profile, done) => {
        try{
            //데이터베이스에 저장된 데이터가 있는지 확인
            const exUser = await User.findOne({
                where:{snsId:profile.id, provider:'kakao'}
            });
            if(exUser){
                done(null, exUser);
            }
            //데이터베이스에 없는 경우는 데이터베이스에 저장
            else{
                const newUser = await User.create({
                    email:profile.json 
                        && profile._json.kaccount_email,
                    nick: profile.displayName,
                    snsId:profile.id,
                    provider:'kakao'

                });
                done(null, newUser);
            }
        }
        catch(err){
            console.error(err);
            done(err);
        }
    }));
}

4)routes 디렉토리의 auth.js 파일에 카카오 로그인 라우팅 코드를 추가
router.get('/kakao', passport.authenticate('kakao'));
router.get('/kakao/callback', 
    passport.authenticate('kakao', 
        {failureRedirect:'/'}), 
        (req, res) => {
            res.redirect('/')
        }
);

5)컴퓨터에 카카오톡 설치 안된 경우는 카카오 톡 설치

6)카카오 프로젝트 생성
=>https://developers.kakao.com 에 접속해서 로그인

=>애플리케이션이 없으면 애플리케이션 추가하기를 눌러서 추가
REST API Key를 복사:dc8401e2995d51b58091b0080f5beccd

=>플랫폼 등록
 - Web 플랫폼 등록을 클릭한 후 입력: http://localhost:9000

=>로그인 활성화
 - 카카오 로그인 메뉴를 클릭 한 후 설정
 - redirect URI를 등록: http://localhost:9000/auth/kakao/callback

=>수집 정보 항목 설정
 - 동의 항목을 클릭해서 설정

7)프로젝트의 .env 파일에 REST API 키 등록
KAKAO_ID=dc8401e2995d51b58091b0080f5beccd

6.글을 작성하고 이미지를 업로드하는 처리
1)routes 디렉토리에 게시글 관련 라우팅 처리를 위한 post.js 파일을 생성하고 작성
const express = require('express');

const multer = require('multer');
const path = require('path');
const fs = require('fs');

const {Post, Hashtag} = require('../models');
const {isLoggedIn} = require('./middleware');

const router = express.Router();

//이미지 업로드 디렉토리 생성
//Sync 가 붙는 함수들은 동작이 끝나야 다음 코드를 수행
//Sync 나 await를 사용하는 함수는
//파일 처리나 데이터베이스 또는 외부와의 통신과 관련된
//함수들에 많이 붙습니다.
//파일 처리나 외부 와의 통신을 하는 코드는 대부분 비동기적으로
//동작합니다.
//이런 작업들은 시간이 오래걸리기 때문에 작업이 끝날때까지
//기다리는 것은 비효율적이 될 수 있기 때문입니다.
try{
    fs.readdirSync('public/img');
}catch(err){
    console.error('img 디렉토리가 없어서 생성합니다.');
    fs.mkdirSync('public/img');
}

//업로드 설정
const upload = multer({
    storage:multer.diskStorage({
        destination(req, file, cb){
            //업로드할 디렉토리 설정
            cb(null, 'public/img');
        }, filename(req, file, cb){
            //확장자 가져오기
            const ext = path.extname(file.originalname);
            //확장자 앞에 현재 시간을 추가
            cb(null, path.basename(file.originalname, ext)
                + Date.now() + ext);
        }
    }),
    limits:{fileSize: 5*1024*1024}
})

//img 요청 처리 - 이미지 업로드 처리
router.post('/img', isLoggedIn, 
    upload.single('img'), (req, res) => {
        //업로드 된 이미지 경로를 클라이언트에게 전송해서
        //클라이언트에서 출력
        res.json({url:`/img/${req.file.filename}`})
});

//폼의 submit 요청이 왔을 때 수행될 내용
//파일 업로드를 하지 않기 위한 객체
const upload2 = multer();
router.post('/', isLoggedIn, upload2.none(),
    async(req, res, next) => {
        try{
            //Post 추가
            const post = await Post.create({
                content:req.body.content,
                img:req.body.url,
                UserId:req.user.id
            });

            //해시태그 추출
            //#으로 시작하고 문자가 나오고 #으로 끝나는 단어
            const hashtags = 
                req.body.content.match(/#[^\s#]+/g);
            //hashtags 가 있으면
            if(hashtags){
                //이 전체를 하나로 수행
                //각각의 데이터를 순회하면서 있으면 찾고 없으면 추가
                //데이터의 첫글자를 제외하고 소문자로 변경해서 저장
                const result = await Promise.all(
                    hashtags.map(tag => {
                        return Hashtag.findOrCreate({
                            where:{title:tag.slice(1).toLowerCase()}
                        })
                    })
                );
                //post 에서 첫번째 해시태그만 저장
                await post.addHashtags(result.map(r => r[0]));
            }
            res.redirect('/');
        }catch(err){
            console.error(err);
            next(err);
        }
});

module.exports = router;

2)routes 디렉토리의 page.js 를 수정
=>첫 화면에서 로그인 한 사용자가 작성한 포스트가 있으면 출력하도록 작업
const express = require('express')

const router = express.Router();

const {isLoggedIn, isNotLoggedIn} = require('./middleware');

const {Post, User} = require('../models');

//무조건 수행
router.use((req, res, next) =>{
    res.locals.user = req.user;
    res.locals.followerCount = 0;
    res.locals.followingCount = 0;
    res.locals.followerIdList = [];
    //다음에 처리할 것이 있으면 다음 처리로 이동해서 처리
    next();
});

router.get('/profile', isLoggedIn, (req, res) => {
    //첫번째 매개변수는 view 파일의 이름이고
    //두번째 매개변수는 view 파일에 넘어가는 데이터입니다.
    res.render('profile', {title:'내 정보 - NodeSNS'});
});

router.get('/join', isNotLoggedIn, (req, res) => {
    res.render('join', {title:'회원 가입 - NodeSNS'});
});

router.get('/', async(req, res, next) => {
    try{
        const posts = await Post.findAll({
            include:{
                model:User,
                attributes:['id', 'nick']
            },
            order:[['createdAt', 'DESC']]
        });
        res.render('main',{
            title:'Node SNS',
            twits: posts
        })
    }catch(err){
        console.error(err);
        next(err);
    }
});

module.exports = router;

3)App.js 파일에 post.js 의 라우팅을 등록
const postRouter=require('./routes/post');
app.use ('/post',postRouter);

7.팔로우 관련 처리
1)팔로우 관련 라우팅 처리를 위한 user.js 파일을 routes 디렉토리에 생성하고 작성
const express = require('express');
const {isLoggedIn} = require('./middleware');
const User= require('../models/user');

const router = express.Router();

//url의 일부분을 파라미터처럼 사용하는 경우에는
//:이름 의 형태로 대입하면 됩니다.
router.post('/:id/follow', isLoggedIn, 
    async(req, res, next)=> {
        try{
            const user = await User.findOne(
                {where:{id:req.user.id}}); 
            if(user){
                //파라미터로 넘어온 id를 추가
                await user.addFollowing(parseInt(
                    req.params.id, 10));
                res.send('success');
            }else{
                res.status(404).send('no user');
            }
        }catch(err){
            console.log(err);
            next(err);
        }
});

module.exports = router;

2)App.js 파일에 생성한 라우터 연결
const userRouter=require('./routes/user');
app.use ('/user',userRouter);

3)passport 디렉토리의 index.js 파일에서 로그인 할 때 팔로우 정보를 가져오도록 수정
const passport = require('passport');

//로그인 관련 모듈 가져오기

//전략 모듈을 가져오기
const local = require('./localStrategy');
const kakao = require('./kakaoStrategy');

//테이블 가져오기
const User = require('../models/user')

module.exports = () => {
    //로그인 했을 때 정보 넘기기
    passport.serializeUser((user, done)=>{
        //유저 정보의 기본키 값을 넘겨주어야 합니다.
        done(null, user.id);
    });

    passport.deserializeUser((id, done) => {
        User.findOne({where:{id},
        include:[
            {model:User,
            attributes:['id', 'nick'],
            as:'Followers'},
            {model:User,
            attributes:['id', 'nick'],
            as:'Followings'}]})
        .then(user => done(null, user))
        .catch(err => done(err))
    })
    //로컬 로그인 함수를 호출
    local();
    //카카오 로그인 함수를 호출
    kakao();
}

4)routes 디렉토리의 page.js 파일을 수정
const express = require('express')

const router = express.Router();

const {isLoggedIn, isNotLoggedIn} = require('./middleware');

const {Post, User, Hashtag} = require('../models');

//무조건 수행
router.use((req, res, next) =>{
    res.locals.user = req.user;
    res.locals.followerCount = req.user?req.user.Followers.length:0;
    res.locals.followingCount = req.user?req.user.Followings.length:0;
    res.locals.followerIdList = req.user?req.user.Followings.map(f=>f.id): [];
    //다음에 처리할 것이 있으면 다음 처리로 이동해서 처리
    next();
});

router.get('/profile', isLoggedIn, (req, res) => {
    //첫번째 매개변수는 view 파일의 이름이고
    //두번째 매개변수는 view 파일에 넘어가는 데이터입니다.
    res.render('profile', {title:'내 정보 - NodeSNS'});
});

router.get('/join', isNotLoggedIn, (req, res) => {
    res.render('join', {title:'회원 가입 - NodeSNS'});
});

router.get('/', async(req, res, next) => {
    try{
        const posts = await Post.findAll({
            include:{
                model:User,
                attributes:['id', 'nick']
            },
            order:[['createdAt', 'DESC']]
        });
        res.render('main',{
            title:'Node SNS',
            twits: posts
        })
    }catch(err){
        console.error(err);
        next(err);
    }
});

module.exports = router;








