**Node API Server
1.개념
1)API(Application Programming Interface)
=>서로 다른 2개의 프로그램을 연결시켜주는 매개체
=>API를 이용하는 이유는 외부에서 함부로 접근할 수 없도록 하거나 트래픽 관리를 위해서 사용합니다.

2)Open API
=>신청 과정 없이(학습용) 또는 누구나 신청만 하면 사용할 수 있는 API
=>신청을 할 때 예전에는 아이디 와 비밀번호를 가지고 했는데 이렇게 만들면 보안 상의 문제가 발생할 수 있어서 최근에는 대부분 도메인을 등록하고 key를 발급받아서 사용하는 형태로 변경되었습니다.
key를 넘겨줄 때 파라미터를 사용하기도 하고 header를 이용해서 사용하기도 합니다.
공공기관 Open API는 get 방식으로 파라미터를 넘기는 방식이고 Kakao는 header를 이용해서 key를 넘기는 방식입니다. 

3)많이 사용되는 데이터 포맷
csv: 구분자를 가진 텍스트 - 변하지 않는 데이터를 전송하고자 할 때 사용

xml: 태그 와 유사하게 만드는 텍스트 - 예전에 많이 사용하고 우리나라에서 공공기관에서 많이 사용, 사람이 알아보기는 쉽지만 json 보다 무거움

json: 자바스크립트 객체 표현 방식의 텍스트 - 요즈음 많이 사용하고 사기업은 대부분 이 방식, xml 보다 가볍지만 사람이 알아보기 어려움

yaml(야믈, yml): 이메일 표현 방식으로 최근에 설정 파일에 많이 사용됩니다.
spring boot 도 properties 와 yaml 을 같이 지원

4)RestFul(Rest API)
=>무엇을 어떻게 한다로 잘 정의된 API
=>동일한 요청은 동일한 URL로 구성
=>URL 과 Method를 보면 어떤 작업인지 예측이 가능해야 한다.
=>서버에서는 REST API 형태로 데이터를 전송만 하고 뷰를 생성하지 않음

5)CORS(Cross Origin Resource Sharing)
=>서로 다른 도메인 간의 데이터 공유
=>Ajax(XMLHttpRequest) 나 Fetch API는 SOP(Same Origin Policy - 동일 출처 정책)를 따르기 때문에 다른 도메인으로 부터 데이터를 받아오지 못합니다.
이 때 서버가 CORS 를 지원하면 Ajax 나 Fethc API를 이용해서 데이터를 받아올 수 있습니다.
Server Application 과 Web Brower 용 Client Application을 다른 프로젝트로 구현한다면 CORS 설정을 반드시 알아야 합니다.

6)JWT(JSON Web Token) - https://jwt.io
=>전자 서명된 URL Safe 의 JSON
=>이 토큰을 이용하면 서버는 별도의 인증 과정없이 JWT 정보를 통해서 인증을 수행














