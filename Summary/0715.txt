1.스레드
=>node 14 버전 이전 까지는 멀티 스레드를 지원하지 않음 - 싱글 스레드 기반
=>14 버전 부터 지원
=>worker_threads  모듈에서 지원

2.child_process 모듈
=>프로세스를 생성하고 관리하는 모듈
=>서버 프로그래밍에서는 직접 사용하는 경우가 드뭄
=>하위 모듈인 exec를 이용해서 실행
=>클라이언트 프로그래밍에서 주로 이용
=>현재 실행 중인 프로세스 확인하기 위한 코드
const exec = require('child_process').exec;

//dir 명령을 수행하기 위한 프로세스 생성
var process = exec('netstat -ano');
//강제 종료 - taskkill -pid 프로세스아이디

//성공 했을 때 처리
process.stdout.on('data', function(data){
    console.log(data.toString());
});

//에러가 발생했을 때
process.stderr.on('data', function(data){
    console.log(data.toString());
});

3.파일 시스템
=>파일에 읽고 쓰기 위한 모듈
=>fs  모듈을 이용
1)동기식 처리를 이용해서 파일의 내용  읽기
fs.readFileSync(파일 경로, [options]): 읽은 데이터를 리턴

2)비동기식 처리를 이용해서 파일의 내용 읽기
fs.readFile(파일 경로, [options], callback 함수): callback 함수의 모양은 매개변수가 2개인데 첫번째 매개변수는 에러의 내용이고 두번째 매개변수는 읽은 데이터 입니다.

3)실습
=>읽어낼 텍스트 파일을 현재 디렉토리에 생성 - test.txt

=>동기식 파일 읽기 - sync.js: 코드가 순서대로 실행
const fs = require('fs');

console.log('파일 읽기 전에 수행');
let data = fs.readFileSync('./test.txt');
console.log('읽은 내용:', data.toString());
console.log('파일 읽은 후에 수행');

=>비동기식 파일 읽기 - async.js: 코드가 순서대로 실행되지 않을 수 있음
const fs = require('fs');

console.log('파일 읽기 전에 수행');
fs.readFile('./test.txt', (err, data) => {
    if(err){
        throw err;
    }
    console.log("읽은 내용:", data.toString());

})
console.log('파일 읽은 후에 수행');

=>비동기식 파일 읽기 - promise 를 이용한 처리: promiseasync.js
const fs = require('fs').promises;

console.log('파일 읽기 전에 수행');
//비동기 처리 - promise 이용, 최근에 권장
fs.readFile('./test.txt')
    .then((data) => {
        console.log(data.toString())
    })
    .catch((err) => {
        console.log(err);
    })
console.log('파일 읽은 후에 수행');

4)비동기식 파일 기록
=>fs.writeFile(파일 경로, 기록할 내용, (에러 객체) =>{ 쓰기 후에 수행할 동작 });
=>logging: 메시지를 콘솔이나 파일 또는 데이터베이스에 기록하는 일

const fs = require('fs');

let today = new Date();
let year = today.getFullYear();
let month = today.getMonth() + 1;
let date = today.getDate();

fs.writeFile(year + '-' + month + '-' + date + '.log',
'메시지', (err) => {
    console.log("파일 기록 성공");
})

4.이벤트 처리
1)이벤트 연결
JavaScript - 객체.addEventListener('이벤트이름', 수행할 함수)

node - 객체.on('이벤트이름', 수행할 함수)

객체.once('이벤트이름', 수행할 함수): 이벤트가 여러 번 발생해도 한 번 만 수행

2)이벤트 삭제
JavaScript - 객체.removeEventListener('이벤트이름', 수행할 함수): 함수를 생략하면 이벤트에 연결될 모든 함수가 삭제

node - 객체.off('이벤트이름', 수행할 함수)

3)이벤트 강제 발생 - trigger
객체.emit('이벤트 이름');

4)작성 시 주의 사항
=>직접 생성한 이벤트가 아니라면 수행할 함수의 모양은 결정되어 있습니다.

5)이벤트 강제 발생시키기 - emit.js
//process 객체에게 test 라는 이벤트가 발생하면 수행할 작업
process.addListener('test', () => {
    console.log('강제로 이벤트 발생')
})

process.emit('test');

5.예외 처리
=>try ~ catch ~ finally를 이용해서 예외처리를 수행
=>서버 프로그래밍에서는 예외 처리를 해주는 것이 좋습니다.
예외 처리를 하지 않았을 때 예외가 발생하면 예외를 던지고 애플리케이션은 중지됩니다.
이렇게 다른 처리를 하지 못하게 됩니다.
=>서버 프로그램은 특별한 경우가 아니면 중지되어서는 안됩니다.
예외 처리를 해서 예외가 발생하더라도 중지 되지 않도록 프로그래밍 하는 것이 중요합니다.

=>예외처리 - exception.js
setInterval(()=>{
    try{
        //예외를 강제로 발생 시킴
        throw new Error("예기치 않은 상황 발생")
    }catch(err){
        //이 부분에는 서버를 멈출것이 아니라면
        //에러를 로깅하고 전송하는 것이 좋습니다.
        console.error(err)
    }
    console.log("타이머");
}, 2000)

6.npm
=>node 패키지 관리자 : 대다수의 자바스크립트 라이브러리들이 npm을 이용해서 패키지 관리를 하기 때문에 node 프로그래밍을 하지 않더라도 반드시 알아두어야 합니다.

1)package
=>배포의 단위

2)node 프로젝트 생성
=>디렉토리에서 npm init 명령을 이용
=>주의할 점은 디렉토리 이름 과 패키지 이름을 동일하게 작성하면 배포할 수 없습니다.

3)package.json
=>node 프로젝트가 만들어지면 생성되는 노드 프로젝트 설정 파일
=>기본적으로는 npm init 명령으로 프로젝트를 생성할 때 작성한 옵션들이 기재됨
=>이후에는 다른 패키지에 대한 dependency 가 설정됨
설치된 패키지들은 node_modules 라는 디렉토리에 저장됨
=>node_modules 가 지워지거나 없는 경우에는 npm install 명령을 다시 수행하면 됩니다.

4)패키지 설치
npm install (--save-dev) (--global) 패키지 이름 나열
--save-dev: 개발용으로 설치, 디버깅 할 때 만 사용, 배포할 때는 자동으로 제외
--global: 현재 프로젝트 이외에 다른 프로젝트에서도 사용할 수 있도록 설치, 개발을 할 때는 사용하지 않음, linux 나 mac 에서는 global로 설치할 때는 앞에 sudo 를 추가해서 관리자 권한으로 명령을 수행해야 합니다.


5)express 패키지 설치
npm install express
=>package.json 의 dependency는 설치 명령을 내린 패키지에 대한 정보만 기록
=>package-lock.json 에는 설치하는 패키지에 의존하는 패키지에 대한 정보도 기록
=>설치 할 때 뒤에 버전 추가 가능

6)패키지 삭제
npm uninstall 패키지이름

7)패키지 배포 - 다른 사용자들이 npm install 로 설치할 수 있도록 하는 것
=>https://www.npmjs.com 에서 회원 가입
=>터미널에서 npm adduser 명령으로 로그인
=>시작 파일에 작성
module.exports = () => {
	return '패키지이름 package';
}

**Node 에서의 웹 프로그래밍
1.Web 3.0
=>컴퓨터가 정보 자원의 의미를 이해하고 논리적 추론까지 가능한 형태의 시멘틱 웹의 개념
AI, BlockChain, Metaverse 등의 개념이 추가됨

=>애플리케이션의 진화 - Open API(JSON 을 많이 사용) 나 SOA(Service Orientied Architecture) 등이 더욱 발전

=>Micro Service 형태의 개발 

=>TDD, 애자일, DDD(도메인 주도 설계) 등의 개발 방법론들을 적용

=>Framework  나 Open Source 사용 확대

2.웹 서비스 구축 방식
1)정적 웹 서비스: HTML, CSS, Javascript 만으로 구성된 웹 서비스로 단순하게 URL을 가지고 HTML을 찾아가는 방식

2)CGI(Common Gateway Interface)
=>서버가 동적으로 작업을 수행한 후 결과를 전송하는 방식
=>클라이언트의 요청을 프로세스를 생성해서 처리
=>Perl 이나 C로 작성한 서버

3)Application Server 방식
=>별도의 Application Server를 만들어서 사용자의 요청을 스레드를 이용해서 처리하는 방식
=>WAS 와 서버용 프로그래밍 언어 또는 Framework의 조합으로 구성
Java => Spring(Kotlin으로도 가능 - 중견 기업들은 Kotlin으로 전향 중)
Python => Django, Flask
JavaScript  => node.js
PHP => laravel framework
C#, ASP.net

루비
클로저
go
...

사용자의 웹 브라우저 또는 웹 요청을 수행하는 클라이언트 프로그램 <-> 웹 서버 <-> 웹 애플리케이션 서버(Tomcat, 제우스 등) <-> 서버 애플리케이션 <-> 저장소(서버리스 개념의 데이터 저장소-Firebase, 관계형 데이터베이스 - oracle, mysql, MS-SQL Server, Tibero 등, NoSQL - Mongo DB 등)

3.HTTP 모듈
=>node 의 기본 내장 모듈로 HTTP 기반의 웹 애플리케이션 개발을 도와주는 모듈
=>모듈의 이름은 http
=>서버 생성 - http 모듈 객체.createServer(함수(요청 객체, 응답 객체){내용})
요청 객체의 이름은 관례상 req 또는 request 라고 하고 응답 객체의 이름은 res 또는 response 라고 합니다.
=>서버 실행 - 생성한 서버 객체를 가지고 listen(서버아이피, 포트번호)
=>서버 중지 - 서버 객체.close()

1)서버의 이벤트
=>request: 클라이언트의 요청이 있는 경우
=>connection: 클라이언트가 접속한 경우
=>close: 서버가 종료될 때
=>checkContinue: 지속적인 연결을 하고 있는 경우
=>upgrade: 클라이언트가 HTTP 업그레이드를 요청할 때
=>clientError: 클라이언트에서 오류가 발생했을 때

2)request 객체
=>url: 요청 주소
=>method: 전송 방식

3)response 객체
=>writeHead(상태코드, 객체): 헤더 작성
=>end(데이터, 인코딩 방식): 본문 작성

4)서버 생성 및 접속
=>서버로 사용할 파일을 생성 - server1.js
//웹 서버 모듈 추출
const http = require('http');

//서버 생성
http.createServer((req, res) => {
    //응답 헤더 작성
    res.writeHead(200, 
        {'Content-Type':'text/html; charset=utf8'})
    res.write('<h1>Hello Node Web Server</h1>');
    res.end('<p>Hello</p>');
})
.listen(9001, ()=>{
    console.log('서버 대기 중');
})

=>서버 실행: node server1.js

=>브라우저에서 접속: localhost:9001 로 접속
localhost 대신에 127.0.0.1 이라고 입력해도 됨
다른 컴퓨터에서는 서버 컴퓨터의 IP를 앞에 붙이면 됨

5)출력
=>직접 HTML 코드를 작성해도 되지만 대부분의 경우는 별도의 HTML 파일을 만들고 HTML 파일의 내용을 출력하는 방식으로 작성

=>출력할 HTML 파일 생성 - server2.html
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8"/>
        <title>파일을 읽어서 출력</title>
    </head>
    <body>
        <p>HTML 내용을 읽어서 출력</p>
    </body>
</html>

=>서버 파일 생성 - server2.js
//웹 서버 모듈 추출
const fs  = require('fs').promises;
const http = require('http');

//서버 생성
http.createServer(async (req, res) => {
    //HTML 파일의 내용 읽기
    const data = await
    fs.readFile('./server2.html');
    //응답 헤더 작성
    res.writeHead(200, 
        {'Content-Type':'text/html; charset=utf8'})
    res.end(data);
})
.listen(9001, ()=>{
    console.log('서버 대기 중');
})

=>서버 파일 실행

=>브라우저 접속

6)URL 결정
=>서버에게 클라이언트가 URL을 전송하면 서버가 URL을 해석해서 적당한 출력을 만들어주는 형태로 웹 서비스를 만들었는데 이 때 URL은 이해하기 쉬운 구조로 만드는 것이 좋고 서로 다른 종류의 클라이언트 라도 동일한 요청을 한다면 동일한 URL을 사용하도록 하는 것을 권장합니다.

7)전송 방식(요청 방식)
=>GET: 클라이언트의 데이터(query string, parameter)를 URL에 붙여서 전송하는 방식으로 기본이 되는 전송 방식인데 
장점 - 자동 재전송이 된다
단점 - 보안이 취약, 데이터의 크기에 제약이 있음
비밀번호 와 파일, textarea 가 있는 경우는 GET 방식으로 전송하면 안됩니다.
데이터 조회 작업(Read)을 할 때 이용 

=>POST: 클라이언트의 데이터를 헤더에 숨겨서 전송하는 방식
최근에는 동일한 방식으로 클라이언트의 데이터를 전송하는데 조금 더 세분화 해서 사용
POST: 삽입에 이용
PUT: 수정에 이용
 PATCH: 일부분만 수정
DELETE: 삭제에 이용
OPTIONS: 요청을 하기 전에 통신 옵션을 설명하기 위해 사용

8)REST API(Representational State Transfer, Restful)
=>서버의 자원을 정의하고 자원에 대한 URL을 지정하는 방법으로 URL 과 요청 방식만으로 요청한 작업을 예측할 수 있도록 해주는 API Server
=>디바이스 나 접속하는 애플리케이션 종류에 상관없이 동일한 요청은 동일한 URL로 처리

클라이언트가 요청을 하면 서버가 처리를 하고 뷰를 만들어서 클라이언트에게 전송하는 방식의 프로그래밍이 많았는데 이렇게 하지 말고 서버는 처리를 한 후 데이터만 클라이언트에게 전송하고 클라이언트 측에서 데이터를 해석해서 출력하라고 권장을 합니다.

=>web 에서는 서버가 데이터를 제공하고 클라이언트 애플리케이션이 ajax 나 web socket을 이용해서 서버의 데이터를 가져온 후 출력하는 방식으로 처리합니다.
폼의 데이터도 form 의 submit 버튼으로 처리하지 않고 ajax 나 web socket 방식으로 전송합니다.
ajax 요청을 만들 때 순수 자바스크립트(바닐라 스크립트)를 잘 이용하지 않고 라이브러리(jquery 를 많이 사용 - jquery는 사용하지 않는 것이 좋습니다.)를 이용하는 경우가 많습니다.

9)Cookie 와 Session 및 Web Socket
=>HTTP 나 HTTPS 는 상태가 없음 - 연결하지 유지하지 않음
데이터를 주고 받으면서 수행해야 하는 대화형 애플리케이션 제작이 어렵습니다.

=>쿠키는 클라이언트를 구분할 수 있는 코드 와 데이터를 클라이언트에 저장을 해두고 클라이언트가 요청할 때 마다 서버에게 전송하는 방식으로 처리하는 개체
쿠키는 클라이언트 쪽에 저장을 하기 때문에 보안이 취약하고 문자열만 저장 가능합니다.

쿠키이름=값의 형태로 설정
Expires=날짜: 쿠키의 유효 기간을 설정
Max-age=초: 초를 입력해서 현재 시간으로부터 얼마동안 유효한지 설정
Domain=도메인이름: 쿠키를 공유할 수 있는 도메인을 설정
기본은 현재 애플리케이션
Path=URL: 쿠키를 사용할 수 있는 Path 설정
Secure: HTTPS 인 경우만 쿠키를 전송
HttpOnly: 자바스크립트로 쿠키 변경 불가능

=>세션은 쿠키를 기반으로 해서 서버에 저장을 해서 클라이언트를 구분하는 방식
예전에는 세션을 메모리에 저장하는 것이 일반적이었지만 최근에는 데이터베이스 나 파일로 저장하는 것을 권장합니다.`

=>웹 브라우저 저장소: localStorage, sessionStorage, Web SQL, Indexed DB 등을 이용해서 웹 브라우저 안에 데이터를 저장할 수 있음
이 데이터는 서버에게 자동으로 전송되지 않으며 자바스크립트로 만들어져 있기 때문에 문자열 이외의 데이터도 저장 가능

=>웹 소켓은 HTTP 대신에 ws 라고 하는 프로토콜을 이용해서 소켓 프로그래밍 처럼 계속 연결을 유지하는 HTML5 API로 채팅처럼 짧은 메시지를 여러 번 전송하는 애플리케이션 구현에 적합

=>쿠키를 생성하기 위한 파일을 생성하고 실행: cookie.js
//웹 서버 모듈 추출
const http = require('http');

//서버 생성
http.createServer((req, res) => {
    //응답 헤더 작성
    res.writeHead(200, 
        {'Set-Cookie':'mycookie=cookietest'})
    res.write('<h1>Hello Node Web Server</h1>');
    res.end('<p>Hello Cookie</p>');
})
.listen(9001, ()=>{
    console.log('서버 대기 중');
})

=>브라우저에서 접속한 후 마우스 오른쪽을 클릭해서 검사 창을 열어서 애플리케이션에서 확인


10)로컬에 저장
=>Web Storage
localStorage 와 sessionStorage로 나눔
localStorage는 한 번 저장하면 삭제할 때 까지 유지
sessionStorage는 세션이 만료되면 자동으로 소멸
Map 과 유사한 형태로 사용하기 때문에 스토리지이름['키'] = 값의 형태로 저장을 하거나 setItem(키, 값)을 이용해서 저장하는 것이 가능하고 읽을 때는 getItem(키) 나 스토리지이름['키']를 이용하면 됩니다.
=>서버에서 받은 데이터를 일시적으로 저장해두었다가 서버와 연결이 안될 때 또는 서버에게 전송할 필요가 없는 데이터 저장에 이용

=>세션 스토리지에 데이터를 저장하기 위한 sessionStorage.html 파일을 생성하고 작성
<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <title>세션 스토리지</title>
    </head>
    <body>
        <fieldset>
            <legend>세션 스토리지 이용</legend>
            key:<input type="text" id="key" />
            value:<input type="text" id="value" />

            <input type="button" value="삽입" id="addbtn"/>
            <input type="button" value="삭제" id="delbtn"/>
            <input type="button" value="윈도우추가" id="newwindowbtn"/>
        </fieldset>
        <fieldset>
            <legend>세션 스토리지 데이터</legend>
            <select id="list" size=10>
            </select>
            <input type="button" value="재출력" id="reloadbtn"/>
        </fieldset>
    </body>

    <script>
        let key = document.getElementById("key");
        let value = document.getElementById("value");

        let addbtn = document.getElementById("addbtn");

        //세션스토리지의 내용을 list에 출력하는 함수
        let showData = function(){
            //list 안의 내용을 삭제
            list.innerHTML = '';
            
            //세션 스토리지 순회
            for(var i=0; i<sessionStorage.length; i=i+1){
                //i 번째 키를 찾아옴
                var temp = sessionStorage.key(i)
                //select 에 추가
                list.options[list.options.length] = 
                    new Option(temp + ":" + 
                    sessionStorage[temp], temp)
            }
            key.value='';
            value.value='';
        }

        addbtn.addEventListener('click', (e)=>{
            //세션 스토리지에 저장
            sessionStorage[key.value] = value.value

            showData();

        })

        let delbtn = document.getElementById("delbtn");
        delbtn.addEventListener('click', (e) => {
            delete sessionStorage[key.value];

            showData();

        })
        
        let newwindowbtn = 
            document.getElementById("newwindowbtn");
        newwindowbtn.addEventListener('click', (e)=>{
            window.open(location.href);
        });

        let list = document.getElementById("list");
        let reloadbtn = document.getElementById("reloadbtn");

        //화면에 모든 요소가 로드되고 나면
        window.addEventListener('load', (e) =>{
            showData();
        })

    </script>
</html>


=>로컬 스토리지에 데이터를 저장하기 위한 localStorage.html 파일을 생성하고 작성
<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <title>로컬 스토리지</title>
    </head>
    <body>
        <fieldset>
            <legend>로컬 스토리지 이용</legend>
            key:<input type="text" id="key" />
            value:<input type="text" id="value" />

            <input type="button" value="삽입" id="addbtn"/>
            <input type="button" value="삭제" id="delbtn"/>
            <input type="button" value="윈도우추가" id="newwindowbtn"/>
        </fieldset>
        <fieldset>
            <legend>로컬 스토리지 데이터</legend>
            <select id="list" size=10>
            </select>
            <input type="button" value="재출력" id="reloadbtn"/>
        </fieldset>
    </body>

    <script>
        let key = document.getElementById("key");
        let value = document.getElementById("value");

        let addbtn = document.getElementById("addbtn");

        //세션스토리지의 내용을 list에 출력하는 함수
        let showData = function(){
            //list 안의 내용을 삭제
            list.innerHTML = '';
            
            //세션 스토리지 순회
            for(var i=0; i<localStorage.length; i=i+1){
                //i 번째 키를 찾아옴
                var temp = localStorage.key(i)
                //select 에 추가
                list.options[list.options.length] = 
                    new Option(temp + ":" + 
                    localStorage[temp], temp)
            }
            key.value='';
            value.value='';
        }

        addbtn.addEventListener('click', (e)=>{
            //로컬 스토리지에 저장
            localStorage[key.value] = value.value

            showData();

        })

        let delbtn = document.getElementById("delbtn");
        delbtn.addEventListener('click', (e) => {
            delete localStorage[key.value];

            showData();

        })
        
        let newwindowbtn = 
            document.getElementById("newwindowbtn");
        newwindowbtn.addEventListener('click', (e)=>{
            window.open(location.href);
        });

        let list = document.getElementById("list");
        let reloadbtn = document.getElementById("reloadbtn");

        //화면에 모든 요소가 로드되고 나면
        window.addEventListener('load', (e) =>{
            showData();
        })

    </script>
</html>

=>서버를 위한 파일을 생성하고 실행 - storage.js
//웹 서버 모듈 추출
const http = require('http');
const fs = require('fs').promises;

//서버 생성
http.createServer(async(req, res) => {
    if(req.url === '/session'){
        const data = await 
            fs.readFile('./sessionStorage.html');
        res.writeHead(200,
             {'Content-Type':'text/html; charset=utf-8'});
        return res.end(data);

    }else if(req.url === '/local'){
        const data = await 
            fs.readFile('./localStorage.html');
        res.writeHead(200,
             {'Content-Type':'text/html; charset=utf-8'});
        return res.end(data);

    }
})
.listen(9001, ()=>{
    console.log('서버 대기 중');
})







































