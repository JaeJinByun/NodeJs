**Mongo DB 연동
1.연동 작업
=>패키지: mongodb
=>접속에 필요한 정보
host: 위치
포트번호: 기본 포트 번호는 27017
아이디 와 비밀번호: 생략 가능

2.Mongo DB에 접속해서 샘플 데이터 생성

use node
db.item.insert({'itemid':1, 'itemname':'레몬', 'price':500, 'description':'비타민 C가 풍부한 쓴 귤', 'pictureurl':'lemon.jpg'})
db.item.insert({'itemid':2, 'itemname':'오렌지', 'price':1500, 'description':'비타민 C가 풍부한 당귤', 'pictureurl':'orange.jpg'})
db.item.insert({'itemid':3, 'itemname':'키위', 'price':2000, 'description':'비타민 C가풍부한 다래', 'pictureurl':'kiwi.jpg'})
db.item.insert({'itemid':4, 'itemname':'포도', 'price':1000, 'description':'항산화 성분과 당분이 높고 무기물이 많은 과일', 'pictureurl':'grape.jpg'})
db.item.insert({'itemid':5, 'itemname':'딸기', 'price':2000, 'description':'수분 함량이 높은 과일', 'pictureurl':'strawberry.jpg'})
db.item.insert({'itemid':6, 'itemname':'무화과', 'price':300, 'description':'칼슘, 섬유질 및 항산화 물질을 많이 함유한 식물', 'pictureurl':'fig.jpg'})

3.node 프로젝트 기본 설정
1)프로젝트 생성
=>디렉토리 생성 - node_mongo

2)필요한 패키지 설치
일반 설치: express morgan multer mongodb ejs
개발용: nodemon

3)package.json 파일의 scripts 수정
"scripts": {
    "start":"nodemon app",
    "test": "sample"
  },

4)프로젝트에 img 디렉토리에 샘플 이미지를 저장

5)프로젝트에 html 파일을 저장할 views 디렉토리를 생성

6)업데이트 한 시간을 기록할 update.txt 파일을 생성

7)Entry Point 로 사용할 App.js 파일을 생성하고 작성
const express  = require('express');

//로그 기록 과 관련된 패키지
const path = require('path');
const fs = require('fs');
const morgan = require('morgan');

const multer = require('multer');

//서버 생성
const app = express();
app.set('port', process.env.PORT || 8000);

//개발 과정에서만 로그 기록
app.use(morgan('dev'));

//POST 방식의 파라미터를 읽기 위한 설정
var bodyParser = require('body-parser');
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({extended:true}));

//파일 다운로드를 위한 설정
var util = require('util');
var mime = require('mime');

//이미지를 저장할 디렉토리가 없으면 생성 - 생략 가능
try{
    fs.readdirSync('img');
}catch(err){
    console.log("img 디렉토리가 없어서 생성");
    fs.mkdirSync('img');
}

//파일 업로드 설정
const upload = multer({
    storage:multer.diskStorage({
        destination(req, file, done){
            done(null, 'img/');
        }, filename(req, file, done){
            const ext = path.extname(file.originalname);
            done(null, path.basename(file.originalname, ext) + Date.now() 
                + ext)
        }
    }), limits:{fileSize: 10 * 1024 * 1024}
})

//뷰 엔진 설정 - 뷰 파일 경로 설정
app.set('view engine', 'html');
app.engine('html', require('ejs').renderFile);

//MongoDB 사용 객체 생성
var MongoClient = require('mongodb').MongoClient;
var db;
var databaseUrl = 'mongodb://localhost:27017/';

//에러 가 발생했을 때 처리
app.use((err, req, res, next) => {
    console.log(err);
    res.status(500).send(message);
})

//서버 실행
app.listen(app.get('port'), () => {
    console.log(app.get('port'), '번 포트에서 대기 중');
});

4.전체 데이터 가져오기: App.js 파일에 작성
app.get('/item/all', (req, res, next) => {
    MongoClient.connect(databaseUrl, 
        function(err, database){
            //접속에 실패한 경우
            if(err != null){
                res.json({'result':false, 'message':err});
            }
            //사용할 데이터베이스 설정
            db = database.db('node');
            //전체 데이터 가져오기
            db.collection('item')
                .find()
                .sort({'itemid':-1})
                .toArray(function(err, items){
                    res.json({'count':items.length,
                        'list':items, 'result':true});
                })
    })
})

5.데이터 일부분 가져오기
=>App.js 파일에 작성
//데이터의 일부분 가져오기
app.get('/item/list', (req, res, next) => {
    //파라미터 읽기
    const pageno = req.query.pageno;
    const count = req.query.count;

    //파라미터를 로직에 필요한 형태로 연산
    var start = 1;
    var size = 3;
    if(pageno != undefined && count != undefined){
        start = (pageno - 1) * count;
        size = parseInt(count);
    }

    MongoClient.connect(databaseUrl, 
        function(err, database){
            if(err != null){
                res.json({'result':false, 'message':err});
            }

            db = database.db('node');

            db.collection('item')
                .find()
                .toArray(function(err, items){
                  var len = items.length;
                  db.collection('item')
                  .find()  
                  .sort({'itemid': -1})
                  .skip(start)
                  .limit(size)
                  .toArray(function(err, items){
                    res.json({'count':len, 'list':items,
                        'result':true});
                  })
                })

    })
})

=>확인
localhost:8000/item/list
localhost:8000/item/list?pageno=2&count=2

6.상세보기
=>App.js 파일에 상세보기를 위한 코드를 추가
app.get('/item/detail', (req, res, next) => {
    //파라미터 읽기
    const itemid = req.query.itemid;

    MongoClient.connect(databaseUrl, 
        function(err, database){
            if(err != null){
                res.json({'result':false, 'message':err});
            }

            db = database.db('node');

            db.collection('item')
                .findOne({'itemid': Number(itemid)},
                    function(err, item){
                        if(item == null){
                            res.json({'result':false,
                            'message':'데이터 없음'});
                        }else{
                            res.json({'result':true, 
                                'item':item});
                        }
                    })

    })
})

=>브라우저에 입력해서 테스트
localhost:8000/item/detail?itemid=1
localhost:8000/item/detail?itemid=12

7.데이터 삽입
1)데이터 삽입 화면으로 이동 - 웹에서만 사용
=>App.js 파일에 데이터 삽입 화면으로 이동하는 코드를 작성
app.get('/item/insert', (req, res, next)=>{
    res.render('insert');
})

=>views 디렉토리에 insert.html 파일을 작성
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>데이터 삽입</title>
    </head>
    <body>
        <form method="post" enctype="multipart/form-data">
            아이템 이름:
            <input type="text" name="itemname"/><br/>
            가격:
            <input type="text" name="price"/><br/>
            설명:
            <input type="text" name="description"/><br/>
            이미지:
            <input type="file" name="pictureurl"/><br/>
            <input type="submit" value="삽입" />

        </form>
    </body>
</html>

2)데이터 삽입을 처리
=>App.js 파일에 삽입을 처리하는 코드를 작성
app.post('/item/insert', upload.single('pictureurl'),
    (req, res, next) => {
        //폼에서 post 방식으로 전송된 파라미터 읽기
        const itemname = req.body.itemname;
        const description = req.body.description;
        const price = req.body.price;

        //업로드 된 파일 이름 설정
        var pictureurl;
        if(req.file){
            pictureurl = req.file.filename;
        }else{
            pictureurl = "default.jpg";
        }
        
        MongoClient.connect(databaseUrl, 
            function(err,database){
                if(err != null){
                    res.json({'result':false,
                         'message':err})
                }
                db = database.db('node');

                //itemid 만들기
                db.collection('item')
                .find({}, {projection:{_id:0, itemid:1}})
                .sort({itemid:-1})
                .limit(1)
                .toArray(function(err, result){
                    if(err){
                        res.json({'result':false});
                    }

                    var itemid = 1;
                    if(result[0] != null){
                        itemid = result[0].itemid + 1;
                    }
                    console.log(itemid);
                    
                    db.collection('item').insert(
                        {"itemid":itemid,
                    "itemname":itemname, "price":price,
                    "description":description, 
                    "pictureurl":pictureurl}, 
                    function(err,result){
                        res.json({'result':true});
                    });
                })
        })
    })

8.데이터 수정
1)기본키를 이용해서 데이터를 찾아와서 데이터를 수정화면에 출력
=>예전에는 데이터를 찾아와서 템플릿 엔진을 이용해서 출력하는 경우가 많았지만 최근에는 ajax 나 fetch 또는 websocket 같은 API를 이용해서 데이터를 가져와서 출력하는 경우가 많습니다.

=>App.js 파일에 수정 요청을 처리하는 코드를 작성
app.get('/item/update', (req, res, next)=>{
    res.render('update');
})

=>views 디렉토리에 update.html 파일을 생성하고 작성 - insert.html 파일을 복사해서 생성

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>데이터 수정</title>
    </head>
    <body>
        <div id="msg"></div>
        <form method="post" enctype="multipart/form-data">
            아이템 아이디:
            <input type="text" name="itemid"
            id="itemid"/><br/>
            아이템 이름:
            <input type="text" name="itemname"
            id="itemname"/><br/>
            가격:
            <input type="text" name="price" 
            id="price"/><br/>
            설명:
            <input type="text" name="description"
            id="description"/><br/>
            이미지:
            <input type="file" name="pictureurl"/><br/>
            <input type="hidden" name="oldpictureurl"
            id="oldpictureurl" />
            <input type="submit" value="수정" />

        </form>
    </body>

    <script>
        var xhr = new XMLHttpRequest();
        xhr.open('GET', '/item/detail?itemid=' + 1);
        xhr.send('');
        xhr.addEventListener('load', () => {
            var data = JSON.parse(xhr.responseText);
            if(data.result == true){
                document.getElementById("itemid").value = 
                    data.item.itemid;
                document.getElementById("itemid").readOnly = 
                    true;
                document.getElementById("itemname").value = 
                    data.item.itemname;
                document.getElementById("price").value = 
                    data.item.price;
                document.getElementById("description").value = 
                    data.item.description;
                document.getElementById("oldpictureurl").value = 
                    data.item.pictureurl;
                document.getElementById("oldpictureurl").readOnly = 
                    true;
            }else{
                document.getElementById("msg")
                    .innerHTML = "수정할 데이터 없음";
            }
        })

    </script>
</html>

    </script>
</html>

2)수정 처리
=>App.js 파일에 데이터 수정 작업을 처리해주는 코드를 작성
app.post('/item/update', upload.single('pictureurl'),
    (req, res, next) => {
        const itemid = req.body.itemid;
        const itemname = req.body.itemname;
        const price = req.body.price;
        const description = req.body.description;
        const oldpictureurl = req.body.oldpictureurl;

        var pictureurl = oldpictureurl;
        if(req.file){
            pictureurl = req.file.filename;
        }

        MongoClient.connect(databaseUrl, 
            function(err, database){
                if(err != null){
                    res.json({'result':false});
                }
                db = database.db('node');
                db.collection('item').update(
                    {"itemid": Number(itemid)},
                    {$set:{"itemname":itemname,
                    "price":price, 
                    "description":description,
                    "pictureurl":pictureurl}},
                    function(err, result){
                        if(err){
                            res.json({'result':false});
                        }else{
                            res.json({'result':true});
                        }
                    })
        })
})

9.삭제
=>삭제는 기본키를 파라미터로 넘겨받아서 삭제를 수행
=>삭제를 할 때는 고려할 부분이 실제 삭제를 하지 않고 삭제가 되었다는 표시만 하는 방법도 고민을 해봐야 합니다.

1)삭제할 itemid를 입력받기
=>App.js 파일에 삭제를 위한 화면 처리 코드를 작성
app.get('/item/delete', (req, res, next) =>{
    res.render('delete');
})

=>views 디렉토리에 delete.html 파일을 생성하고 작성
<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <title>데이터 삭제</title>
    </head>
    <body>
        <form method="post" id="deleteform">
            삭제할 ID:<input type="text" name="itemid"/>
            <br/>
            <input type="submit" value="삭제"/>
        </form>
    </body>
    <script>
        var f = document.getElementById("deleteform");
        f.addEventListener("submit", (e)=>{
            e.preventDefault();
            var r = confirm("정말로 삭제");
            if(r){
                f.submit();
            }
        })
    </script>
</html>


2)실제 삭제를 구현
=>App.js 파일에 작성
app.post('/item/delete', (req, res, next) =>{
    const itemid = req.body.itemid;

    MongoClient.connect(databaseUrl, 
        function(err, database){
            if(err != null){
                res.json({"result": false});
            }
            db = database.db('node');

            db.collection('item').deleteOne(
                {"itemid":Number(itemid)},
                function(err, result){
                        res.json({"result": true});
               })
    })
})







